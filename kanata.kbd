;; FEATURES kanata                                       QMK                                              QMK minumal portable requirements
;; - Home row mods                                        (y) but timing problems                          Fallback abc layer
;; - Autosymbol: Tap_Hold Dbl_Tap_Hold Long_Hold          (y) but no long_hold, dbl_tap-hold on modifiers  Fallback abc layer
;; - Long_Hold                                            n                                               *Default Querty layer
;; - Symbol layer (rarly used)                            y                                                Fallback Symbol layer
;; - Nav/Number layer                                     y + sticky + dedicated layerkey                  Fallback number/nav layer
;; - sticky layer not needed                              y                                                On Fallback layers
;; - one-shot shift,                                      y                                                On Fallback layer
;; - alt tap otimization                                  inprogress
;; - F23 to Ahk Mouse layer								  y even better also with ahk highlight           *Mouse Layer
;; - F24 to Ahk hotkeys									  y
;; - leaderkey, wincompose and ahk integration            (y) no leaderkey but integrations still work
;; - AHK hotstring special version                        AHK hotstring
;; - extra thumbkeys can be supported (F13+)              extra thumbkeys can be handeled directly (mouse)
;; - F-Keys as normal                                     F-Key layer                                     *F-Key layer 
;; - bspc on ö											  - on ö or - on , _on =
;; - rdesktop alt-pgup controls not mappable              pgup can be remapped
;; - Layer exit letter v}
;;
;; layers(6): normal,
;;            fallback normal,
;;            fallback symbol
;;            fallback number/nav
;;            mouse,
;;            F-key 
;; retry via newest version and skip fallback:  ctl win alt mouse F13 space F14 LFKey left down right
;;     space/numbers 
;; TODO wich thumb activates nav?
;; SC06F remap altgr to f24 in sharpkeys is not recognized by kanata
;; if numtab is good make a key to flip remote desktop controls -> dont work bc of timings non remappable keys
;; double leader keying (multi f24 sldr) inconsistencies with sldr 
;; TODO sldr key not used
;; TODO tap hold AltGr to f24 / AltGr and remove wincompose
;; TODO test release-key | release-layer key release not always working

;; CTRL + SPACE + ESC => Exit KANATA immediatly

(defcfg
   sequence-timeout 3000
  ;; windows-altgr cancel-lctl-press ;; remove the lctl press that comes as a combo with ralt  with F24 mapping
  ;; windows-altgr add-lctl-release  ;; add an lctl release when ralt is released           with standard Altgr 
  ;; windows don't map altgr to avoid both options from above 
  ;; NOTE: even with these workarounds, putting lctl+ralt in your defsrc may
  ;; not work too well with other applications that use WH_KEYBOARD_LL.
  ;; Known applications with issues: GWSL/VcXsrv

  ;; Optional configuration: enable kanata to execute commands.
  ;;
  ;; I consider this feature a hazard so it is conditionally compiled out of
  ;; the default binary.
  ;;
  ;; This is dangerous because it allows kanata to execute arbitrary commands.
  ;; Using a binary compiled with the cmd feature enabled, uncomment below to
  ;; enable command execution:
  ;; danger-enable-cmd yes
)
(defcustomkeys
  ü    186
  +*~  187
  #    191
  ö    192
  ß    219
  ^    220
  ´    221
  ä    222
  <    226
)


;; If you are looking for other keys, the file src/keys/mod.rs should hopefully
;; provide some insight.
;; defsrc for iso german qwertz layout  
;; z and y are not flipped
;; positioning the /-key at the ansi or iso position both work > TODO retest
(defsrc
  esc       f1
  \         1    2    3    4    5    6    7    8    9    0    [    ]    bspc
  tab       q    w    e    r    t    z    u    i    o    p    ü    =
  caps      a    s    d    f    g    h    j    k    l    grv  '    /    ret
  lsft 102d y    x    c    v    b    n    m    ,    .    -    rsft
  lctl      lmet lalt           spc                           rctl
)
;;(defsrc
;;  esc       f1
;;  \         1    2    3    4    5    6    7    8    9    0    [    ]    bspc
;;  tab       q    w    e    r    t    z    u    i    o    p    ;    =
;;  caps      a    s    d    f    g    h    j    k    l    grv  '    /    ret
;;  lsft 102d y    x    c    v    b    n    m    ,    .    -    rsft
;;  lctl      lmet lalt           spc                           rctl
;;)

;; The first layer defined is the layer that will be active by default when kanata starts up.
;; There are currently a maximum of 25 layers allowed.

;;          tapdance / hold symbols of the base layer s=shift c=ctrl a=alt
;;          1!@  2    3``` 4$   5%    6&  7/   8([  9)]  0 
;;          !@   "    (    )[   $    &    ü%   ?    ö#   \ 
;;          ä`   ß    [    ]    '    /    %         #  
;;         mouse |    {    }]   +    =    *  ;<F24  :>  -_~
;; TODO where to put delete
;; TODO (multi lrld f9) is not working lets try makro in next release
;; rpt just rpeats one key
;; TODO revisit win and esc otimization and rsft _ vs rsft esc  
;; ctrl + Z single key ?
;; @tab esc 
(deflayer qwerty
  @ech      f1
  @^ec      @1@  @2   @3`  @4   @5   @6   @7   @8    @9   @0   @sz  C-z  bspc
  @tab      @q!  @w'' @e   @r   @t$  @z&  @uü  @i?   @oö  @p\  del  sldr
  @atx      @aä  @sß  @d[  @f]  @g'  @h/  @j%  @kC   @lA# @bwn @rtw esc  @rtw
  @oss  f24 @F23 @x|  @c{  @v}  @b+  @n=  @m*  @,F24 @.:> @-_~ @rsd
  @ocl      @oml @oal           @mus                           @ocl 
)
;; does not work for gaming
(deflayer game
  _         f1
  \         1    2    3    4    5    6    7    8    9    0    [    @que bspc
  tab       q    w    e    r    t    z    u    i    o    p    ;    =
  caps      a    s    d    f    g    h    j    k    l    grv  '    /    ret
  lsft 102d y    x    c    v    b    n    m    ,    .    -    rsft
  lctl      lmet lalt           spc                           rctl
)
;; IDEA instead of a numpad put diacrits and pinky hell keys here, but space is limited and shift is still needed e.g. for upper case diacrits
;;          #     [    ]    {    }           
;;          ä     ß    ö    ü    \        
;;     |    <     (    )    +    *
;; TODO 
;; esc key only once Win key bspc twice
;; caps=symbol layer ... better use of caps?
;;  ISO102 = backtick used? 
(deflayer numbers
  _         _
  _         @at1  @at2 @at3 @at4 @at5 @at6 @at7 @at8  @at9 @atm lrld @ral _
  _         @-_~  1    2    3    esc  esc  home up    end  pgup pgdn _     
  @sy1      @.wn  @al4 @ct5 @sf6 0    bspc left down  rght _    _    _    _
  _    @btk @,F24 7    8    9    del  ret  @stb @cde  @apg @mrt _
  _    _    _               _                              _
)
(deflayer numberstab
  _         _
  _         _    _    _    _    _    _    _    _    _    _    lrld @gam _
  _         @-_~ 1    2    3    esc  esc  home up   end  pgup pgdn _     
  _         rght left rght rght 0    bspc left down rght _    _    _    _
  _   @btk @,F24 7    8    9    del  ret  @stb @cde @apg @mrt _
  _         _    _           _                           _
)
;;       ^  symbols layer (todo ß ü ö are mapped to duplicated symbols, - and _ are already on base layer)
;;          1    2    3    4    5    6    7    8    9    0 
;;          !@   "    (    )    $    &    %    \    #    ?
;;          `    |    [    ]    '    /    %    _    #    -_
;;       ^  ´    |    {    }    +    =    *    <    >    ~
(deflayer symbols
  _         _
  _         _    _    _    _    _    _    _    _    _    _    _    _    _     
  _         @@   @˝   @﴾   @﴿   @$   @&   @%   @?   #    @\   _    _         
  _         @btk @|   @[   @]   @'   @/   @%   @_   #    @-_~ _    _    _          
  _    @^   @tck @|   @{   @}   +*~  @=   @*   @<   @>   @~   _               
  _         _    _              _                             _          
)
;; TODO define cool shortcuts
(deflayer vsymbols
  _         _
  _         _    _    _    _    _    _    _    _    _    _    _    _    _     
  _  (unicode Ù) @˝   @﴾   @﴿   @$   @&   @%   @?   #    @\   _    _         
  _  (unicode Õ) @|   @[   @]   @'   @/   @%   @_   #    @-_~ _    _    _          
  _    @^   @tck @|   @{   _    +*~  @=   @*   @<   @>   @~   _               
  _         _    _              _                             _          
)
;; There are variants of the standard mouse buttons }which "tap" the button. mrgt -> mrtp]<>~´__~~~~~__________________--------___
;; IDEA lsymbols and rsymbols are only usefull if activated by letter keys like v/n but I ditched that concept as to hard to do fast

(defalias
  ;; shifted german keys
  ! S-1
  ˝ S-2
  §	S-3
  $	S-4
  %	S-5
  &	S-6
  /	S-7
  ﴾	S-8
  ﴿	S-9
  =	S-0
  ? S-ß
  * S-+*~
  ' S-#
  ; S-,
  : S-.
  _ S--
  > S-<
  < <  ;; not needed
  ;; AltGr keys
  ~ A-C-+*~	
  \ A-C-ß
  | A-C-<
  } A-C-0							                                                                        ;; }
  { A-C-7   	                                                                                            ;; {
  ] A-C-9							                                                                        ;; ]
  [ A-C-8	
  € A-C-e
  @ A-C-q
  ² A-C-2
  ³ A-C-3
  µ A-C-m
  
  ;; switch-layer also possible for stickyness
  num (layer-toggle numbers)
  numtab (layer-toggle numberstab)
  sym (layer-toggle symbols)
  syv (layer-toggle vsymbols)
  sy1 (one-shot 2000 (layer-toggle symbols))
  oss (one-shot 1000 lsft)
  ocl (one-shot 1000 lctl) 
  stb (tap-hold-release 200 5000 tab lsft)
  cde (tap-hold-release 200 5000 del lctl)
  apg (tap-hold-release 200 5000 pgup lalt)
  mrt (tap-hold-release 200 5000 mrtp lmet)
  oml (one-shot 1000 lmet)
  oal (one-shot 1000 lalt)
  gam (layer-switch game)
  que (layer-switch qwerty)
  ;; There are two additional versions of tap-hold available:
  ;; 1. tap-hold-press: if there is a key press, the hold action is activated
  ;; 2. tap-hold-release: if there is a press and release of another key, the hold action is activated

  ;; alt tab
  at1 (multi lalt tab)
  at2 (multi lalt tab tab)
  at3 (multi lalt tab tab tab)
  at4 (multi lalt tab tab tab tab)
  at5 (multi lalt tab tab tab tab tab)
  at6 (multi lalt tab tab tab tab tab tab)
  at7 (multi lalt tab tab tab tab tab tab tab)
  at8 (multi lalt tab tab tab tab tab tab tab tab)
  at9 (multi lalt tab tab tab tab tab tab tab tab tab)
  ;;at0 (tap-dance 500 (A-tab (macro f24 r) (macro f24 t) (macro f24 z)) ) old verion of atm
  aty (multi @numtab lalt (macro tab) ) ;; alt tab by dbl_tap-hold k
  atx (tap-hold 200 150 (multi lalt tab) (multi @numtab lalt (macro tab tab)) ) ;; alt tab by hold caps
  ;;atm (tap-dance 700 (@at1 @at2 @at3 @at4) ) Sequence now works but is inferior to the number row mapping
  atm  (tap-dance 500 ( A-tab (macro A-(tab 90 tab )) (macro A-(tab 90 tab  90 tab )) (macro A-(tab 90 tab  90 tab  90 tab )) ))
  ;; not working on remote desktop atp  (tap-dance 500 ( (macro A-pgup) (macro A-(pgup 90 pgup )) (macro A-(pgup 90 pgup  90 pgup )) (macro A-(pgup 90 pgup  90 pgup  90 pgup )) ))

  ;; home row mods
  f]  (tap-dance 140 ((tap-hold-release 140 140 f lsft) (tap-hold 200 240 (macro f f) (macro A-C-9))))
  j%  (tap-dance 140 ((tap-hold-release 140 140 j lsft) (tap-hold 200 240 (macro j j) (macro S-5))))
  d[  (tap-dance 140 ((tap-hold-release 200 240 d lctl) (tap-hold 200 240 (macro d d) (multi (macro A-C-8 ) (tap-hold 200 400 XX (macro A-C-9 ))))))
  ;; using left ctl on k resolves DITTO issues TODO retest
  ;; double tap hold k for alt-tab layer TODO test usage
  kC  (tap-dance 140 ((tap-hold-release 200 240 k lctl) (tap-hold 200 240 (macro k k) @aty ))) 
  ;; TODO test if Long_Tap_O or Dbl_Tap_Hold_L is used in practise
  lA# (tap-dance 140 ((tap-hold-release 200 240 l alt) (tap-hold 200 240 (macro l l) (macro /) )))
  ;; TODO test usage of WIN
  rtw (tap-hold-release 200 5000 ret lctl)
  ;; rtw (tap-hold-release 200 340 (multi ret sldr) lmet) this makes ret not appear
  
  rsd (tap-hold-release 200 240 S-- lsft) ;; TODO not used ?! BUG rsft get ignored on RDesktop -> use lsft ?
  ;; number layer home row mods
  sf6 (tap-hold-release 200 300 6 lsft)
  ct5 (tap-hold-release 200 300 5 lctl)
  al4 (tap-hold-release 200 340 4 lalt)
  .wn (tap-hold-release 200 240 . lmet)
  bwn (tap-hold-release 200 5000 bspc lmet)
  wn0 (tap-hold-release 200 340 0 lmet)
  ;;ght (tap-hold-release 200 240 rght rmet)  ;;works but not used

  ;; symbols
  bsl A-C-[							                                                                        ;; \
  rcb A-C-0							                                                                        ;; }
  lcb A-C-7   	                                                                                            ;; {
  rsb A-C-9							                                                                        ;; ]
  lsb A-C-8							                                                                        ;; [
  pip A-C-102d						                                                                        ;; |
  lth 102d							                                                                        ;; <
  gth S-102d						                                                                        ;; >
  til A-C-=			            	                                                                        ;; ~
  tck (macro ] spc )				                                                                        ;; ´
  btk (macro S-] spc )				                                                                        ;; `
  ^   (macro \ spc )				                                                                        ;; ^
  ^ec  (tap-hold 200 300 esc @^) 
  1@ (tap-hold 140 140 1 (multi (macro S-1 ) (tap-hold 200 400 XX (macro bspc (unicode @) ))) )  
  2 (tap-hold 140 300 2 (multi (macro @˝ ) (tap-hold 200 700 XX (macro @˝ ))) )
  ;; multi 3 3 because macro 3 3 is not working
  3` (tap-dance 140 ((tap-hold 10 100 3 (multi @btk (tap-hold 200 400 XX (macro S-] S-]))  ))  (tap-hold 10 100 (multi 3 3) (macro S-´ S-´ S-´ spc))))
  4 (tap-hold 200 300 4 (macro S-4 ))
  5 (tap-hold 200 300 5 (macro S-5 ))
  6 (tap-hold 200 300 6 (multi (macro S-6 ) (tap-hold 200 400 XX (macro S-6 ))))
  7 (tap-hold 200 300 7 (multi (macro S-7 ) (tap-hold 200 400 XX (macro S-7 ))))
  8 (tap-hold 200 300 8 (multi (macro S-8 ) (tap-hold 200 400 XX (macro bspc A-C-8 ))) )
  9 (tap-hold 200 300 9 (multi (macro S-9 ) (tap-hold 200 400 XX (macro bspc A-C-9 ))) )
  0 (tap-hold 10 100 0 (multi (macro S-0 ) (tap-hold 200 400 XX (multi (macro S-0 ) (tap-hold 200 400 XX (macro S-0 ))  ))  ) )
  sz (tap-hold 200 300 ß (multi (macro S-ß ) (tap-hold 200 500 XX (macro bspc A-C-ß ))))
  ;; q (multi q sldr) eats the next key after q
  ;;q! (tap-hold 140 140 q (multi (macro S-1 ) (tap-hold 200 400 XX (macro bspc A-C-q ))) )                 ;; q ! @
  ;;q! (tap-hold 1 140 q (macro-release-cancel S-1 600 bspc (unicode @) 800 bspc S-1 800 bspc))                   ;; q ! @
  ;;q! (tap-dance 120 ((tap-hold 1 90 q (multi (macro S-1 ) (tap-hold 200 600 XX (macro bspc (unicode @) ))) )  (unicode @)  (unicode ä) ) )
  q! (tap-hold 1 100 (tap-dance 150 (q  (unicode @))) (multi (macro S-1 ) (tap-hold 200 600 XX (macro bspc (unicode @) )))  ) ;; q ! @       Great! tapdance can be nested inside tap-hold
  w'' (tap-hold 140 140 w (multi (macro S-2 ) (tap-hold 200 400 XX (macro S-2 ))) )                         ;; " ""
  e  (tap-hold 140 140 e (multi (macro S-8 ) (tap-hold 200 400 XX (macro S-9 ))))                           ;; (  ()
  r  (tap-hold 140 140 r (multi (macro S-9 ) (tap-hold 200 400 XX (macro bspc A-C-8 ))) )                   ;; ) [ todo find a better use 
  t$  (tap-hold 140 140 t (macro S-4))                                                                      ;; $
  z&  (tap-hold 140 140 z (multi (macro S-6 ) (tap-hold 200 400 XX (macro S-6 ))))                          ;; & &&
  ;;ü (unicode ü) ;; unicode does not allow shift for upper case use macro or tap-dance for anti key repeat
  uü  (tap-hold 140 140 u (multi (macro ü ) (tap-hold 400 400 XX (macro-release-cancel bspc S-5 800 bspc ü 800 bspc))) )                      ;; ü = ;  u ü % 
  p\  (tap-dance 140 ((tap-hold 10 100 p (multi (macro @\ ) (tap-hold 200 300 XX (macro @\ ))))  (tap-hold 10 100 (macro p p) (macro @\ @\) )))  ;; p \ \\
  oö  (tap-hold 140 140 o (multi (macro ö ) (tap-hold 400 400 XX (macro bspc # ))) )                      ;; ö = grv #=/  o ö #
  i?  (tap-hold 140 140 i (multi (macro @? ) (tap-hold 200 500 XX (macro @? ))))                          ;; ? = S-[      i ? ??
;;aä (tap-hold 140 140 a (multi (macro ' ) (tap-hold 400 400 XX (macro bspc S-] spc ))))                    ;; ä = '  `=S-]
  aä (tap-hold 1 140 a (macro-release-cancel ä 400 bspc S-´ spc 600 bspc ä 600 bspc a 600 bspc))            ;; ä = '  `=S-]
  ;;ß (unicode ß) ;; prevents ẞ use C-A-S on the real key
  ;; panik sß  (tap-hold 140 140 s (multi @ß  (tap-hold 200 400 XX (multi bspc sldr ))))
  sß  (tap-hold 140 140 s ß)                                                                               ;; ß = [
  g'  (tap-hold 140 140 g (multi (macro @' ) (tap-hold 200 500 XX (macro @' ))) )                         ;; ' ''
  h/  (tap-hold 140 140 h (multi (macro S-7 ) (tap-hold 200 400 XX (macro S-7 ))) )                         ;; / //
  x|  (tap-hold 140 140 x (multi (macro A-C-102d ) (tap-hold 200 500 XX (macro A-C-102d ))) )               ;; | ||
  c{  (tap-hold 140 140 c (multi (macro A-C-7 ) (tap-hold 200 500 XX (macro A-C-0 ))))                      ;; { {}
  ;;v}  (tap-hold 140 140 v (multi (macro A-C-0 ) (tap-hold 200 500 XX (macro bspc A-C-9 ))) )                ;; v } ]
  ;; THIS implements Layer_with_default (if nothing is pressed on the layer) TODO what do we whant this Layer to do? TDOO the default layer key is only printed after release
  v}  (tap-hold 140 140 v (tap-hold-release 200 5000 (macro A-C-0 )  @syv))             ;; v } ]
  b+  (tap-hold 140 140 b (multi (macro +*~ ) (tap-hold 200 500 XX (macro +*~ ))))                              ;; + = =  b + ++
  n=  (tap-hold 140 140 n (multi (macro S-0 ) (tap-hold 200 400 XX (multi (macro S-0 ) (tap-hold 200 400 XX (macro S-0 ))  ))) ) ;; n = == === 
  m*  (tap-hold 140 140 m (multi (macro @* ) (tap-hold 200 700 XX @* )))                      ;; * = S-= with long autorepeat
;;,F24 (tap-dance 140 ((tap-hold 10 100 , (multi (macro S-, ) (tap-hold 200 400 XX (macro bspc @lth ))) )  (tap-hold 10 100 f20 (macro @lth))))  ;; ,, = F24 , ; <
;; .:> (tap-dance 140 ((tap-hold 10 100 . (multi (macro S-. ) (tap-hold 200 400 XX (macro bspc @gth ))) )  (tap-hold 10 100 (macro . .) (macro @gth)) (tap-hold 10 100 (macro . . .) .) ))  ;; . : >
;;  -_~ (tap-dance 140 ((tap-hold 10 100 - (multi (macro S-- ) (tap-hold 200 400 XX (macro bspc @til ))) )  (tap-hold 10 100 (macro - -) (macro @til)) (tap-hold 10 100 (macro - - -) -) ))  ;; - _ ~
;; nesting of tap-dance inside tap-hold is now possible
   ,F24 (tap-hold 10 100 (tap-dance 140 (, (tap-hold 10 100 f20 (macro @<))))  (multi (macro @; ) (tap-hold 200 400 XX (macro bspc @< ))) )  ;; ,, = F24 , ; <
  .:> (tap-hold 10 100 (tap-dance 140 (. (tap-hold 10 100 (macro . .) (macro @>)) (tap-hold 10 100 (macro . . .) .) )) (multi (macro @: ) (tap-hold 200 400 XX (macro bspc @> ))) )    ;; . : >
  -_~ (tap-hold 10 100 (tap-dance 140 (-   (tap-hold 10 100 (macro - -) (macro @~)) (tap-hold 10 100 (macro - - -) -) )) (multi (macro S-- ) (tap-hold 200 400 XX (macro bspc @~ ))) )  ;; - _ ~
  ;; DBL-tap-Hold is not realy good for the frequently used symbol layer
  ;; mus (tap-dance 120 ((tap-hold  140 140 spc @num) (tap-hold  140 140 spc @sym) spc spc spc))
  ;; mus (tap-hold  200 200 (multi spc sldr) @num) works but would require awkward sequneces
  mus (tap-hold  200 200 spc @num)
  ;;ral (multi ;; not working
  ;;      (release-key lctl)
  ;;      (release-key lsft)
  ;;      (release-key lmet)
  ;;      (release-key lalt)
  ;;      (release-key rctl)
  ;;      (release-key rsft)
  ;;      (release-key rmet)
  ;;      (release-key ralt)
  ;;    )
  ;;ral (macro 100 lctl 100 lsft 100 lmet 100 lalt 100 rctl 100 rsft 100 rmet 100 ralt  ) ;; not working
  ral S-C-M-A-9
  
  ;;f1 (macro f1 f24)  ;; only usefull in applications that do not react on F1 ==> not usefull
)

  ;; (macro-release-cancel 1 300 bspc S-1 300 S-1 300 bspc bspc S-2)
  
  ;; macro support A-() and unicode now
  ;; Having a cmd action in your configuration without explicitly enabling
  ;; `danger-enable-cmd` **and** using the cmd-enabled executable will make
  ;; kanata refuse to load your configuration. The aliases below are commented
  ;; out since commands aren't allowed by this configuration file.
  ;;
  ;; Note that the parameters to `cmd` are executed directly as opposed to
  ;; passed to a shell. So for example, `~` and `$HOME` would not refer
  ;; to your home directory on Linux.
  ;;
  ;; You can use:
  ;; `cmd bash -c "your_stuff_here"` to run your command inside of bash.
  ;;
  ;; cm1 (cmd bash -c "echo hello world")
  ;; cm2 (cmd rm -fr /tmp/testing)
 ;; )

;; The underscore _ means transparent. The key on the base layer will be used
;; instead. XX means no-op. The key will do nothing.

;; The `lrld` action stands for "live reload". This will re-parse everything

;; The mouse buttons can be clicked using mlft, mrgt and mmid, representing the
;; left, right, and middle mouse buttons respectively. If the key is held, the
;; button press will also be held.
;;
;; If there are multiple mouse click actions within a single multi action, e.g.
;; (multi mrgt mlft), then all the buttons except the last will be clicked then
;; unclicked. The last button will remain held until key release. In the example
;; given, the button sequence will be:
;; press key->click right->unclick right->click left->release key->release left
;;
;; There are variants of the standard mouse buttons which "tap" the button.
;; These are mltp, mrtp, and mmtp. Rather than holding until key release, this
;; action will click and unclick the button once the key is pressed. Nothing
;; happens on key release. The action (multi lctl mltp) will result in the
;; sequence below:
;; press key->press lctl->click left->unclick left->release key->release lctl
;;(deflayer mouse
;;  _    @mwu @mwd @mwl @mwr _    _    _    _    _    _    _    _    _
;;  _    pgup bck  _    fwd  _    _    _    _    _    _    _    _    _
;;  _    pgdn mlft _    mrgt mmid _    _    _    _    _    _    _
;;  _ _  _    mltp _    mrtp mmtp _    _    _    _    _    _
;;  _    _    _              _                 _    _
;;)

;; Press and release fake keys.
;;
;; Fake keys can't be pressed by any physical keyboard buttons and can only be
;; acted upon by the actions on-press-fakekey and on-release-fakekey. The
;; purpose of fake keys is for a use case such as holding modifier keys for
;; any number of keypresses and then releasing the modifiers when desired.
;;
;; The actions associated with fake keys in deffakekeys are parsed before
;; aliases, so you can't use aliases within deffakekeys. Other than the lack
;; of alias support, fake keys can do any action that a normal key can,
;; including doing operations on previously defined fake keys.
;;
;; Operations on fake keys can occur either on press (on-press-fakekey or
;; on release (on-release-fakekey The use cases for the on-release variant
;; are left up to your own creativity.
;; (deflayer fakekeys
;;   _    @fcp @fsp @fmp @pal _    _    _    _    _    _    _    _    _
;;   _    @fcr @fsr @fap @ral _    _    _    _    _    _    _    _    _
;;   _    @fct @fst @rma _    _    _    _    _    _    _    _    _
;;   _ _  _    _    _    _    _    _    _    _    _    _    _
;;   _    _    _              _                  _    _
;; )

(deffakekeys
  ctl lctl
  sft lsft
  lsft lsft
  met lmet
  alt lalt
  mmid mmid
  pal (multi
        (on-press-fakekey ctl press)
        (on-press-fakekey met press)
        (on-press-fakekey alt press)
      )
;; release everthing key -> very usefull
  rall (multi
        (on-press-fakekey ctl release)
        (on-press-fakekey sft release)
        (on-press-fakekey met release)
        (on-press-fakekey alt release)
      )
)

(defalias
  fcp (on-press-fakekey ctl press)
  fcr (on-press-fakekey ctl release)
  fct (on-press-fakekey ctl tap)
  fsp (on-release-fakekey sft press)
  fsr (on-release-fakekey sft release)
  fst (on-release-fakekey sft tap)
  fmp (on-press-fakekey met press)
  fap (on-press-fakekey alt press)
  far (on-press-fakekey alt release)
  rma (multi
        (on-press-fakekey met release)
        (on-press-fakekey alt release)
      )
  pal (on-press-fakekey pal tap)
  rall (on-press-fakekey rall tap)

  ;; If you find that an application isn't registering keypresses correctly
  ;; with multi, you can try out:
  ;; - on-press-fakekey-delay
  ;; - on-release-fakekey-delay
  ;;
  ;; Do note that processing a fakekey-delay and even a sequence of delays will
  ;; delay any other inputs from being processed until the fakekey-delays are
  ;; all complete, so use with care.
  stm (multi ;; Shift -> middle mouse with a delay
    (on-press-fakekey lsft press)
    (on-press-fakekey-delay 200)
    (on-press-fakekey mmid press)
    (on-release-fakekey mmid release)
    (on-release-fakekey-delay 200)
    (on-release-fakekey lsft release)
  )
  ;;tab (tap-hold-press  200 300 (macro tab ) @pal )  ;; hyper must be repressed ... maybe a layer would be better
  tab (tap-hold-press  200 400 tab esc )
  ech (tap-hold 140 400 esc (multi home (tap-hold 400 1100 XX end)) )
)

;; Vim-style leader-key sequences. Activate a fakekey-tap by pressing a "leader"
;; key and then a sequence of characters.
;; See: https://github.com/jtroo/kanata/issues/97
;;
;; You can add an entry to defcfg to change the sequence timeout (default is 1000):
;;     sequence-timeout <number(ms)>
(defseq git-status (g s t))
(deffakekeys git-status (macro g i t spc s t a t u s ret))

(defseq web-de (w e))
(deffakekeys web-de (macro g e r h a r d . h e i d e (unicode @) w e b . d e))

;; ahk f24 f23 an be triggert mouse here
(defseq web-def (j l))
(deffakekeys web-def (macro f23))

(defseq str (s t))
(defseq ded (d e))
(defseq wic (w i))
(defseq wal (w a))
(defseq mar (m a))
(defseq m'  (m '))
(defseq flo (f l))
(defseq seb (s e))
(defseq jar (j a))
(defseq mon (m o))
(defseq mfg (m f))
(defseq bye (b y))
(defseq msg (m s))
(defseq dih (d i))
(defseq iba (i b))
(defseq z1  (1))
(defseq z2  (2))
(defseq iba (3))
(defseq gh (g h))
(defseq gg (g g))
(defseq rdtab (l))
(defseq isodt (a))
(defseq dedt (q))

;; deffakekeys with S- for uppercase, with defsrc keys, with  spc A-C-q and kp1-kp9, numbers in macros are pauses
(deffakekeys isodt (macro b b a a , ))
(deffakekeys dedt (macro b b q q , ))
(deffakekeys rdtab (macro A-pgup ))
(deffakekeys gh  (macro lalt 80 kp1 ret )) ;; this is working in outlook
(deffakekeys gg  (macro lalt 80 kp1 ret )) ;; this is working in outlook
(deffakekeys str (macro S-h  a l l o spc  S-h  e r r spc   S-s  t r e c k e r t , ret ret ))
(deffakekeys ded (macro S-h  a l l o spc  S-h  e r r spc  S-d  e d e r i c h s , ret ret ))
(deffakekeys wic (macro S-h  a l l o spc  S-h  e r r spc   S-w  i c k l m a y r , ret ret ))
(deffakekeys wal (macro S-h  a l l o spc  S-f  r a u spc   S-w  a l d e n m a i e r , ret ret ))
(deffakekeys mar (macro S-h  a l l o spc  S-m  a r k u s , ret ret ))
(deffakekeys m'  (macro S-h  a l l o spc  S-f  r a u spc   S-m  ' d e r , ret ret ))
(deffakekeys flo (macro S-h  a l l o spc  S-f  l o r i a n , ret ret ))
(deffakekeys seb (macro S-h  a l l o spc  S-s  e b a s t i a n , ret ret ))
(deffakekeys jar (macro S-h  a l l o spc  S-h  e r r  spc  S-j  a r o s c h , ret ret ))
(deffakekeys mon (macro S-h  a l l o spc  S-m  o n i k a , ret ret ))
(deffakekeys mfg (macro S-m  i t spc   f r e u n d l i c h e n spc  S-g  r ; [ e n   spc ret  S-g  e r h a r d spc  S-h  e i d e ))
(deffakekeys bye (macro b y e ret S-g  e r h a r d ))
(deffakekeys msg (macro g e r h a r d . h e i d e (unicode @) m s g . g r o u p ))
(deffakekeys dih (macro S-d  - S-s  S-m  S-y  S-q  - S-i  kp7 S-m  S-y  S-d  - kp7 kp5 ))
(deffakekeys iba (macro S-d  S-e  kp3 kp0 kp7 kp0 kp0 kp2 kp0 kp2 kp7 kp0 kp0 kp0 kp4 kp5 kp5 kp0 kp6 kp8 kp6 kp0 ))
(deffakekeys z1 (macro kp1 kp1 . kp1 kp1 . kp2 kp0 kp2 kp2 ))
(deffakekeys z2 (macro kp2 kp1 . kp1 kp2 . kp2 kp0 kp0 kp1 ))

(defalias
 rcl (tap-hold-release 200 200 sldr rctl) ;; !! sldr is hard coded leader key fake key  !! dropped in favor of ocl
 ;; F23 (tap-hold 200 200 y (multi f24 sldr))  ;; works technically f24 triggers y itselft if  must be hold for f24 ... feels bad
 F23 (tap-hold-release 200 200 y (macro f23) )
)