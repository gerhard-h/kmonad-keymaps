#|
TOC
start size
0001 133	Documentation/ideas
0133 055	defcfg
0188 033	defvar			platform specific characters, timeouts
0221 031	deflocalkeys
0252 026	global aliases virtualkeys: numlock, mods,...
0278 082!	templates		
0359 079!	aliases	for layers
0437 116!	aliases for (shifted) symbol, tap-hold for numbers, keypad, outerkeys, dynamic-macros
0553 019	aliases for home row mods
0574 017	aliases for chord activation 
0591 125	aliases for j!, letter that invoke templates, k, ß, x`, b=, g*, ,;< .:> 
0716 059!	chords
0775 017	defsrc
0792 023	layer base
0815 015	layer GAME
0830 011	layer notp (no fast typing support)
0841 056!	layer CAPS
0897 011	layer fast typing
0908 047	layer numbers & aliases
0955 013	layer numbers fixed
0968 039	layer alt tab & aliases
1007 020	layer symbols
1027 011	layer Numberrow *** Functionrow *** Keypadrow  *** dynamic-macro ***
1038 011	layer macro F-keys
1049 085!	layers for Mouse
1134 039	more macro sequence definitions
1175

0133 120 lines	defcfg defvar deflocalkeys
0252 580 lines	aliases(440) templates(80) chords(60)
0775 300 lines	layers

Changelog (since v1.6.1)
Added: O-(...) for any-order overlapping keys in sequences.
Added: conditional configuration using environment variables via (environment (name val) ...)
Added: allow double-quotes within strings by adding Rust-style strings r#"<content>"#. 
Added: parse numbers as a delay (unit milliseconds) for cmd-output-keys
Added: unmod can accept a modifier list as the first parameter to selectively undo only some modifiers
Added(Windows): capability to use Kanata as a library for AHK
Added(Windows): GUI tray app (gui variants of the executable)
Added(Windows-Interception): add device exclusion (include by default) in defcfg

BUG Ah right I recall the issue now, I believe it's that the fake-key presses interfere with the tap-dance eager.
Instead of tap-dance eager you might instead want to put the logic in switch, e.g. a case of ((and (input-history real ' 3) (input-history virtual toggle 2))) (multi (on-press release-key toggle) (macro bspc t e s t)) break.
(defsrc
  '
  )
(deflayer quot
  @quo
)
(defalias
  quo (tap-dance-eager 5000 (
      (switch
      ((input virtual toggle))
      (multi (unicode ”) (on-press release-vkey toggle)) break
      () (multi (unicode “) (on-press press-vkey toggle)) break)

    (macro bspc t e s t))
  )
)
(defvirtualkeys toggle nop0)

TODO https://github.com/jtroo/kanata/issues/1160#event-14262202947 retry JIS keyboard

TODO uses cases for switch (not, key-timing, input, input-history)

HOW TO IMPLEMENT STAT WITH TOGGLE
 Using this idea one could implement: Type 2 UPPERCASE letters in sequence to activate CAPS WORDS
I wonder if I would Iike it, or it would confuse me.
(defvirtualkeys toggle nop5)
(defsrc 1)
(deflayer base 
 (switch 
  ((input virtual toggle))
    (multi 2 (on-press release-vkey toggle)) break
  () (multi 1 (on-press press-vkey toggle)) break
 ))


(defvar var1 a)
(defsrc a)
(deffakekeys vk1 XX)
(deffakekeys vk2 XX)
(deflayer base
  (switch
    ((and a b (or c d) (or e f))) XX break
    ((not (and a b (not (or c (not d))) (or e f)))) XX break
    () _ fallthrough
    (a b c) $var1 fallthrough
    ((or (or (or (or (or (or (or (or))))))))) $var1 fallthrough
    ((key-history a 1) (key-history b 5) (key-history c 8)) $var1 fallthrough
    ((not
      (key-timing 1 less-than 200)
      (key-timing 4 greater-than 500)
      (key-timing 7 lt 1000)
      (key-timing 8 gt 20000)
    )) $var1 fallthrough
    ((input virtual vk1)) $var1 break
    ((input real lctl)) $var1 break
    ((input-history virtual vk2 1)) $var1 break
    ((input-history real lsft 8)) $var1 break
  )
)

sadly, kanata configs of other people are really hard to read. But I still extracted this very cool use case for dynamic-macro of yours, I would never have come up with:

switch to a pain layer for just typing (mimic defsrc)
start recording dynamic-macro (without generating output)
when leaving the layer (or entering any other layer) stop recording and do a switch based decision
either the entered keys are a trigger/sequence for a special action - do it.
or they are just normal typing - then just replay the dynamic-macro .
all this can be multied to a normal key and requires no timeouts to trigger.

since I don't use sequences I'm not sure if this could be done in a simpler fashion.
 permalink https://github.com/DarkKronicle/nazarick/blob/31a5f623e008a8f1e0be360ecb43c69e3baef46b/modules/home/service/kanata/k65.kbd

2023-10-23 16:22 TODO restart simpler version to achiev Ei Au   r e -> ALT + E 
2023-10-24 no effect autohotkey espanso maybe effect citrix? powertoys?
BUG hanging ctrl key with AHK and RDP ... now it is mostly hanging Alt. Adding "lctl lctl" to desktop swap makro didn't fix it
HINT: (implemented): DON'T map G-Shift on Mouse to prevent hanging ctrl key
HINT: (implemented): AHK funtionality to swap desktops without pressing ctl currently (multi lmet lalt ß)
idea: deactivate autohotkey (to see if the problem persists) but than desktop cycling won't work 

restart script after windows locking
$env:WT_SESSION = "0"
Start-Process -WindowStyle Minimized -UseNewEnvironment -FilePath "wt.exe" -ArgumentList "new-tab", "--startingDirectory", "C:\bin", "--", "C:\bin\kanata.exe", "-dnc", "C:\Users\bogorad\git\.dotfiles\kanata\.config\kanata\kanata.kbd", "-p", "0.0.0.0:5588"
Start-Process -WindowStyle Minimized -UseNewEnvironment -FilePath "wt.exe" -ArgumentList "new-tab", "--startingDirectory", "C:\bin", "--", "C:\bin\vmcli.exe", "Command.Restart=1"
exit
IDEA: TWo uppercase letters will start CAPS word-custom
	  - the second Caps presse a virtualkey vkshift 
	  - maybe second vk press to handle numbers,...
	  - vkshift might just be shift => manual shift will still produce upper case
	  - but not pressing shift simliyfies numbers and layers
	  - space  , ; . : tab enter MODS will break the shift Symbols and Numbers will not 
	  - dash might be (unicode -)
	  - Numbers also (unicode)
	  - On switching layers 

	  - first single uppercase letter (vkUpper2 not pressed) -> vkUpper1-PRESS
	  - anything not uppercase letter -> v-Upperz-Release
	  - second upper case letter -> vkUpper2 Press
	  - tracking  Uppercase keys - On Uppercase a) shift is pressed ag b) vk1 is pressed 
	  
	  - follow UCASE letter with sldr as does work poorly because the second shift might have happend befors the sequence
	  - howto avoid it in passwords
 
***** ALT-Tab Guide **************************
 caps-tap 	= alt-tab x1
 caps-hold 	= WASD alt-tab selection 
 J/Q 		= depress ALT to have WASD cursor keys
 A/E		= ESC to exit dialog
 shift caps = S-alt-tab = Cycle though all windows backward (all desktops)? nothing special?
 Lspace caps= RDP replace tab with pgup
 ctl caps 	= keep selection screen open
 
***** CAPS Layer Guide ************************************
 caps Layer toggle with numlock indicator = shift + <-Lspace (exit with shift + <-Lspace, AltGr, Numberline or Macrolayer)
 numbers and punctuation are not upper case all shifts enable lowercase on letters
 Hold symbols are unchanged
 
***** Autosymbol Guide ***********************************
Autosymbol Repeat: TAP_HOLD x TAP x -> xx  d__ d -> //  ,___ . -> < >
Autosymbol DBL-tap-Hold: rare usage on , -> < and . -> > / most cases -> symbol autorepeat / j x have no symbol autorepeat / only homerow letters autorepeat 
Autosymbol Longhold (reconsider) doubling the symbol
TODO-Usage idea: SHIFT + ,. are never used
TODO-Usage LSPACE + RSPACE = ENTER is never used -> mouse?

****** COMBOS Guide **************************************
TODO F24 + E/I :: AHK desktop cycle not used / don't work consistent input must be super fast
INFO V + Ü = DEL
INFO Ü + Ä = BSPC
INFO Ü+Ä+V = C-BSPC
INFO G + , = ESC
INFO , + . = F24

***** Numberrow / dynamic-macro Guide **********
1-5 dynamic-macro play / 11 on baselayer dp0
6-0 dynamic-macro record
11  dynamic-macro save
12	dynamic-macro save 
j=F1,...q*F11,ß=F12
	
*********************** can it be done with qmk ****************************
;; RETRY via only 4 layers base, numbers-nav, symbols, mouse => no place for a normal kanata or querty layer
;; VIA has 4 layers = base+ , nav , symbol, mouse but plain base is missing => replace symbol-layer by combos 
;; FEATURES kanata                versus                 QMK                                              QMK minimal portable requirements
;; - Home row mods                                       (Y) but timing problems                          Fallback abc layer (Fallback = no kanata available)
;; - Autosymbol: Tap_Hold                                 y TAP_HOLD / MOD_TAP                            Fallback abc (but not VIA) => Fallback Symbol layer
;; -(Autosymbol: NO Dbl_Tap_Hold on Shift)                n also timing issues
;; -(Autosymbol: Dbl_Tap_Hold ONLY for SLOW KEYS q,.)     Y for all non modifiers
;; - Autosymbol: Dbl_Tap_Hold on non Shift modifiers      N                                               
;; -(Autosymbol: Dbl_Tap slowes Tap_Hold)				  Y no problem for non modifiers
;; - Autosymbol: Long_Hold                                N                                               
;; - Symbol layer (rarly used space + caps)               y                                               Fallback Symbol layer (with dedicated key)
;; - V-key Symbol layer (not used anymore)               (y) is possible  but maybe not needed             
;; - Nav/Number layer                                     y + sticky + dedicated layerkey                 Fallback number/nav layer (with SPACE)
;; - Shift fork layer                                    (y) tricky 
;; - one-shot layer (rarly used)                          y                                               
;; - one-shot shift,                                      y                                               
;; - alt tap otimization                                  ?												  map caps to ALT-Tab or SYSMBOLS
;; - F23 to Ahk Mouse layer								  y even better also with ahk highlight           *Mouse Layer
;; - F24 to Ahk hotkeys									  y												  ?
;; - leaderkey, wincompose and ahk integration           (y) no leaderkey but integrations still work
;; - AHK hotstring Problems                              (y) less AHK hotstring
;; - extra thumbkeys can be supported (F13+)              extra thumbkeys can be handeled directly (mouse)
;; - F-Keys as normal                                     F-Key layer                                     *F-Key layer 
;; - bspc on ö	 (not used anymore) 					  - on ö or - on , _on =
;; - rdesktop alt-pgup requires interception?             pgup can be remapped
;;
;; INFO wich thumb activates nav? cursor keys seems to be used with right tumb on alice
;; BUG SC06F remap altgr to F24 in sharpkeys is not recognized by kanata
;; INFO double leader keying (multi F24 sldr) inconsistencies with sldr 
;; INFO sldr key not used
;; TODO-Usage AltGr is a bad positionend key anyway - bspc but not used  
;; TODO where to put delete? nav+ö VÜ nav+, 
;; INFO rpt just rpeats one key and no mods ... useless (rpt-any also)
;; TODO revisit win and esc optimization / rsft - vs rsft esc  / @.rtw vs esc_win
;; INFO ctrl + Z single key ? but no need
;; INFO combine @.tab with esc feels bad
   
   TIP If you want instant activation on a tap-hold you could try do something like: (multi (macro a) (tap-hold $100 $100 xx b))
   BUG one shot queueing seems to break after some time - like reloading ahk 
   BUG AltGr + I = ahk menu seems to hang CTRL - SOLVED by excluding AltGr (and Ctrls) from defsrc (really?)	  
|#
(defcfg
   process-unmapped-keys yes ;; WHY yes?
   ;;yes does not help with japanese keys ; did not help with RDP sticky keys;
   ;;Used since Nov 2023 maybe because of dynamic-macros?! 
   ;;maybe usage of rctl rmet ralt in switch
   ;;needed for WINIOV2 and WIN to have mouse modifiers (naga)
   delegate-to-first-layer yes ;;INFO only for layer-switch; _ to reference to base layer seems correct (TODO simplyfy layers). has no effect on deflayermap.
   concurrent-tap-hold yes      ;;TODO now yes is working INFO getting early autosymbols if yes eg. Hold-U + Tap-, gives (; instead of (, same for ({ instead of (ü [TODO make a simulation to prove the problem.] problem has gone 1.7.1p 
   sequence-timeout 3000       ;; sequence not used
   sequence-input-mode visible-backspaced ;;hidden-suppressed ;; hidden-delay-type ;; BUG the hidden types sometimes have shift issues
   sequence-backtrack-modcancel no  ;; unknown
  ;; windows-interception-mouse-hwid "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
  ;; windows-altgr cancel-lctl-press ;; remove the lctl press that comes as a combo with ralt  with F24 mapping
  ;; windows-altgr add-lctl-release  ;; add an lctl release when ralt is released           with standard Altgr 
  ;; HINT: on windows don't map altgr to avoid both options from above 
  ;; NOTE: even with these workarounds, putting lctl+ralt in your defsrc may
  ;; not work too well with other applications that use WH_KEYBOARD_LL.
  ;; Known applications with issues: GWSL/VcXsrv

  log-layer-changes  yes  ;; overhead vs info in console
  
  tray-icon "base.ico" ;; should activate for layers without icons 
  icon-match-layer-name   	yes  	;;|yes| match layer name to icon files even without an explicit (icon name.ico) config
  tooltip-layer-changes   	no  	;;|false|
  tooltip-show-blank    	no  	;;|no|
  tooltip-duration        	500  	;;|500|
  tooltip-size            	24,24	;;|24 24|
  notify-cfg-reload       	yes  	;;|yes|
  notify-cfg-reload-silent	yes   	;;|no|
  notify-error            	yes  	;;|yes|

  ;; Using a binary compiled with the cmd feature enabled - usecases: current date, NUMLOCK status
  danger-enable-cmd yes
  rapid-event-delay 5 ;; (5) This configuration applies to
  ;; a) the release of one-shot-press activation
  ;; b) the release of the tapped key in a tap-hold activation
  
  ;; hw Keychron V10 and K15 Pro (TODO missing laptop keyboard) - keyboard binding prevents layer influences on the mouse
  windows-interception-keyboard-hwids (
  "72, 0, 73, 0, 68, 0, 92, 0, 86, 0, 73, 0, 68, 0, 95, 0, 51, 0, 52, 0, 51, 0, 52, 0, 38, 0, 80, 0, 73, 0, 68, 0, 95, 0, 48, 0, 51, 0, 65, 0, 49, 0, 38, 0, 82, 0, 69, 0, 86, 0, 95, 0, 48, 0, 49, 0, 48, 0, 50, 0, 38, 0, 77, 0, 73, 0, 95, 0, 48, 0, 48, 0, 0, 0, 72, 0, 73, 0, 68, 0, 92, 0, 86, 0, 73, 0, 68, 0, 95, 0, 51, 0, 52, 0, 51, 0, 52, 0, 38, 0, 80, 0, 73, 0, 68, 0, 95, 0, 48, 0, 51, 0, 65, 0, 49, 0, 38, 0, 77, 0, 73, 0, 95, 0, 48, 0, 48, 0, 0, 0, 72, 0, 73, 0, 68, 0, 92, 0, 86, 0, 73, 0, 68, 0, 95, 0, 51, 0, 52, 0, 51, 0, 52, 0, 38, 0, 85, 0, 80, 0, 58, 0, 48, 0, 48, 0, 48, 0, 49, 0, 95, 0, 85, 0, 58, 0, 48, 0, 48, 0, 48, 0, 54, 0, 0, 0, 72, 0, 73, 0, 68, 0, 95, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 95, 0, 83, 0, 89, 0, 83, 0, 84, 0, 69, 0, 77, 0, 95, 0, 75, 0, 69, 0, 89, 0, 66, 0, 79, 0, 65, 0, 82, 0, 68, 0, 0, 0, 72, 0, 73, 0, 68, 0, 95, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 95, 0, 85, 0, 80, 0, 58, 0, 48, 0, 48, 0, 48, 0, 49, 0, 95, 0, 85, 0, 58, 0, 48, 0, 48, 0, 48, 0, 54, 0, 0, 0, 72, 0, 73, 0, 68, 0, 95, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
  "72, 0, 73, 0, 68, 0, 92, 0, 86, 0, 73, 0, 68, 0, 95, 0, 51, 0, 52, 0, 51, 0, 52, 0, 38, 0, 80, 0, 73, 0, 68, 0, 95, 0, 48, 0, 50, 0, 70, 0, 57, 0, 38, 0, 82, 0, 69, 0, 86, 0, 95, 0, 48, 0, 49, 0, 48, 0, 49, 0, 38, 0, 77, 0, 73, 0, 95, 0, 48, 0, 48, 0, 0, 0, 72, 0, 73, 0, 68, 0, 92, 0, 86, 0, 73, 0, 68, 0, 95, 0, 51, 0, 52, 0, 51, 0, 52, 0, 38, 0, 80, 0, 73, 0, 68, 0, 95, 0, 48, 0, 50, 0, 70, 0, 57, 0, 38, 0, 77, 0, 73, 0, 95, 0, 48, 0, 48, 0, 0, 0, 72, 0, 73, 0, 68, 0, 92, 0, 86, 0, 73, 0, 68, 0, 95, 0, 51, 0, 52, 0, 51, 0, 52, 0, 38, 0, 85, 0, 80, 0, 58, 0, 48, 0, 48, 0, 48, 0, 49, 0, 95, 0, 85, 0, 58, 0, 48, 0, 48, 0, 48, 0, 54, 0, 0, 0, 72, 0, 73, 0, 68, 0, 95, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 95, 0, 83, 0, 89, 0, 83, 0, 84, 0, 69, 0, 77, 0, 95, 0, 75, 0, 69, 0, 89, 0, 66, 0, 79, 0, 65, 0, 82, 0, 68, 0, 0, 0, 72, 0, 73, 0, 68, 0, 95, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 95, 0, 85, 0, 80, 0, 58, 0, 48, 0, 48, 0, 48, 0, 49, 0, 95, 0, 85, 0, 58, 0, 48, 0, 48, 0, 48, 0, 54, 0, 0, 0, 72, 0, 73, 0, 68, 0, 95, 0, 68, 0, 69, 0, 86, 0, 73, 0, 67, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
  )
  
  ;; This configuration allows you to customize the length limit on dynamic macros. The default limit is 128 keys.
  dynamic-macro-max-presses 20
  
  ;; dynamic-macro-delay-between-replay-actions customizes the number of ticks
  ;; (approx 1ms) between each replay action of a dynamic macro. The default
  ;; value is 5. This may need to be increased if some state changes, e.g. a
  ;; layer change is not happening at the right time.
  ;; dynamic-macro-delay-between-replay-actions 5
  
  movemouse-smooth-diagonals yes
  movemouse-inherit-accel-state yes  ;; not much effect
)
(platform (wintercept)
(defvar 
  y y	;; INFO wintercept confuses y and z but can be solved with deflocalkeys, vars does not work in defsrc, ( => $z $y can be removed?!) 
  z z
  )
)
(platform (win)
(defvar 
  y y
  z z
  ;; TODO use variables for rsft rctl to handle non interception RDP cases 
  )
)
(platform (win winiov2)
(defvar 
  y z
  z y
  )
)
(defvar 
  off Numpad9 ;; $off used to deactivate template-features TODO use noop keys instead
  ;; timers - this is done to simplyfy adjustment of timing differences on different computers/keyboards 
  100 100 ;; punctuation
  120 120 ;; j!
  140 140 ;; 1! " $ ? # % } ; and tap-dance punctuation
  145 145
  150 150 ;; ( and )
  160 160 ;; homerow shift and & \ @ '
  180 180 ;; template and ö =
  200 200 ;; layers numbers / | { caps-layer
  240 240
  300 300 ;; homerow ctl
  340 340
  350 350
  400 400
  450 450
  500 500 ;;==
  600 600
  700 700
  800 800
  900 900 ;;===
)

(deflocalkeys-wintercept
  -    191
  ü    219
  +    221
  #    220
  ö    186
  ß    189
  ^    192
  ´    187
  ä    222
  <    226
  y    90
  z    89
  ;;- 555 INFO random custom numbers does not work with interception
)

(deflocalkeys-win
  -    189
  ü    186
  +    187
  #    191
  ö    192
  ß    219
  ^    220
  ´    221
  ä    222
  <    226
  y    89    ;; ( y and z are flipped compared to wintercept)
  z    90
)
;; winiov2 doubles AHK keys in a predictabele manner ::by:: becomes ::bbyy:: BUT it kills modifiers on Mouse
;; winiov2 has problems with C+Y = Ditto on the mouse (naga displays C+Z)
(deflocalkeys-winiov2
  -    191
  ü    219
  +    221
  #    220
  ß    189
  ö    186
  ^    192
  ´    187
  ä    222
  <    188
  y    90 
  z    89
)
(defalias
;; *** numlock on / off indicator for CAPS or other sticky layers *** BUG code must be doubled
  ;;.nly (cmd-output-keys powershell.exe -NoProfile -NoLogo -NonInteractive "if ($([console]::NumberLock) -match 'True') { echo '()' } else { echo '(nlck)' }")
 .nly (cmd AutoHotkey numlockon.ah2)
 ;;.nln (cmd-output-keys powershell.exe -NoProfile -NoLogo -NonInteractive "if ($([console]::NumberLock) -match 'True') { echo '(nlck)' } else { echo '()' }")
 .nln (cmd AutoHotkey numlockoff.ah2)
)
(defvirtualkeys
  ;; nlockon/off is only used for while-held scenarios
  ;;nlockon  (cmd-output-keys powershell.exe "if ($([console]::NumberLock) -match 'True') { echo '()' } else { echo '(nlck)' }")
  ;;nlockoff (cmd-output-keys powershell.exe "if ($([console]::NumberLock) -match 'True') { echo '(nlck)' } else { echo '()' }")
  nlockon  (cmd AutoHotkey numlockon.ah2)
  nlockoff (cmd AutoHotkey numlockoff.ah2)
  
  mouselight M-S-f
  to-base (layer-switch base)
  vcaps   (layer-while-held CAPS)
  ;;*** NUMBERS/ALT TAB ***
  ctl lctl
  sft lsft
  met lmet
  alt lalt
  tab tab   ;; this is allowed !
)
;; TODO-Usage
(deftemplate same-side-lshift (defaultaction trigger action)
	(switch
		(rsft lctl rctl ralt lalt lmet rmet) $defaultaction break ;; lshift is missing from the list 
		($trigger) $action break
		() $defaultaction break
	)
)

;;****** key-hold-repeat INFO base concept  ***********************************************************
;;**** re-tapping a key will repeat the last output produced by this key (wether tap or hold)      ****
;;**** historykeys resambles keyrepeat broken up into all its individual keystrokes/modifiers      ****
(deftemplate  key-hold-repeat (timehold time2ndhold keytap keyhold keyrepeat historykey3 historykey2 modlesshistorykey1 combokeylist comboout) 
;; sam v| (t! key-hold-repeat  $200      $800         v      @.|      @.|        XX          ralt        <                  (ü 7)        del     ) 
;; pass combokeylist ($off) XX to disable combo feature. The real combo must be build with chords / this is just for fixing misstiming the combo. Is this even usefull?
;; TODO using RA- ralt may only work with "process-unmapped-keys yes" and wintercept
;; $historykey3 is currently unused.
;; j! x` b= g* ,;< .:> -_~ and homrow mods have there own implementation
;; TIP this template can be wraped in (multi ... @.tp) But for some scenarios (non windtercept / no powertoys / windows 11 ) may require calling @.tp from inside this template
;; TODO is input-history better than key-history? most likely not because we care most about output-keys
;; TODO is there a reason to replace tap-dance-eager with switch?  
 (tap-dance-eager $150 (    
    (tap-hold 1 $timehold 	
		;; I.a first tap of TAP-DANCE holding and then retapping will repeat the hold action (not the long-hold)
		(switch
		    ;;(if-not-in-list $off ($combokeylist) $combokeylist $comboout break) ;; test for combo
			(if-not-equal $historykey2 XX
				(if-not-equal $historykey3 XX ((and (key-history $modlesshistorykey1 1)(key-history $historykey2 2)(key-history $historykey3 3))) $keyhold break )
				(if-equal     $historykey3 XX ((and (key-history $modlesshistorykey1 1)(key-history $historykey2 2)                            )) $keyhold break )
			)
			(if-equal $historykey2 XX
				((key-history $modlesshistorykey1 1))  $keyhold break
			)
			() $keytap break
		)  
		;; I.b hold of first tap of TAP-DANCE - manual Shift overwrites hold / no autorepeat / long-hold for (), {},...
		(switch
		    (if-not-in-list $off ($combokeylist) $combokeylist $comboout break)        ;; held with misstimed chords v + ü = del
			(rsft lsft) (macro $keytap) break ;; Shift Prefer / Shift protection - shifting will disable the hold feature TODO this will not work fine with ctrl+sft+#
			()  (multi 	
					(macro $keyhold ) 
					(tap-hold $180 $time2ndhold XX ;;must $180 be a parameter?
							(if-not-equal $keyrepeat XX (macro $keyrepeat ))      ;;to do (), {},... keyrepeat cannot be a macro itself
							(if-equal $keyrepeat XX XX)
					)
				) break
		)
	)
	;; II. second tap of TAP-DANCE
	(tap-hold 1 $timehold 	
		;; II.a this is identical to I.a
		(switch
			(if-not-equal $historykey2 XX
				(if-not-equal $historykey3 XX ((and (key-history $modlesshistorykey1 1)(key-history $historykey2 2)(key-history $historykey3 3))) $keyhold break )
				(if-equal     $historykey3 XX ((and (key-history $modlesshistorykey1 1)(key-history $historykey2 2)                            )) $keyhold break )
			)
			(if-equal $historykey2 XX
				((key-history $modlesshistorykey1 1))  $keyhold break
			)
			() $keytap break
		)
		;; II.b no need for manual Shift protection / autorepeat enabled
		(switch
		    (if-not-in-list $off ($combokeylist) $combokeylist $comboout break)
			;; !!! here is the difference to tap-dance one !!! 
			((key-history $modlesshistorykey1 1)) $keyhold break				     ;; add double-tap-hold 
			((key-history $keytap 1)) (macro (unmod bspc) (unmod bspc)) fallthrough	 ;; double bspc has no explanation but is needed (including unmod) 
			((key-history $keytap 1)) $keyhold break
			()  (multi 	
					(macro $keyhold ) 
					(tap-hold $180 $time2ndhold XX ;;must $180 be a parameter?
							(if-not-equal $keyrepeat XX (macro $keyrepeat ))      ;;to do (), {},... keyrepeat cannot be a macro itself
							(if-equal $keyrepeat XX XX)
					)
				) break
		)
	)
	;; TODO? add a third tap-dance for autorepeat letters / special or game layer might be better because all keys can be auto repeated
 ))	
)

(defalias
  .dsk (multi lmet lalt ß)  ;; AHK desktop switch must use MODS to be active within RDP  SYMBOL+M 
  .CAPSon  (multi (on-press toggle-virtualkey  vcaps) @.nly) ;;using toggle to be more error redundant
  .CAPSoff (multi (on-press release-virtualkey vcaps) @.nln)
;; *** LAYER-TOGGLE & SWITCH-LAYER(STICKYNESS) ***
  .num (layer-while-held numbers)
  .numtab (layer-while-held numberstab)
  .sym (layer-while-held symbols)
  .syv (one-shot 2000 (layer-while-held vsymbols))
  .syvv (layer-while-held vsymbols)
  .sy1 (one-shot 2000 (layer-while-held symbols))
  .fky (layer-while-held fkeymacro)
  .basen (multi (layer-switch base) @.nln)
  .base (layer-while-held base)
  .numfix (multi (layer-switch numfix) @.nly)
;; *** CAPS WORDS *** ONLY  used  on non base layer TODO-Usage
;; .cwd (caps-word-custom 2000 
;;	(a b c d e f g h i j k l m n o p q r s t u v w x y z ä ü ö)
;;    (1 2 3 bspc del up down left rght rsft -) ;; rsft must be exluded as they are used for triggering caps words
;; )
   .cwl (caps-word-custom 2000 
  	(a b c d e f g h i j k l m n o p q r s t u v w x y z ä ü ö)
      (1 2 3 bspc del up down left rght lsft -) ;; lsft must be exluded as they are used for triggering caps words
   )

;; *** LEFT_Spacebar = F14 : RETURN *** SYMBOLS *** LEFT_Shift + LEFT_Spacebar_hold == numbers ; Shift + LEFT_Spacebar_tap == CAPS-layer ***
  .ff14 (tap-hold  $200 $200  
			(fork ret @.CAPSon (rsft lsft))	
			(fork 
				(multi (layer-while-held numbers) 
					   (tap-hold-release-timeout 0 1100
							(layer-while-held symbols)
							(layer-while-held symbols) (layer-while-held numbers)
					   )
				)
				(layer-while-held numbers)
				(lsft)
			)
  )
;; *** LEFT_Spacebar on CAPS-layer  
  .ff14c (tap-hold  $200 $200  
			(fork ret @.CAPSoff (rsft lsft))
			(fork 
				(multi (layer-while-held numbers) (layer-while-held symbols))
				(layer-while-held numbers)
				(lsft)
			)
  )
;; *** Numberline(unused) + dynamic-macro ***  
  .ff15 (tap-hold 1 $200  (multi @.nly (layer-switch numberline)) (multi (layer-while-held numberline) (on-press tap-virtualkey  nlockon) (on-release tap-virtualkey  nlockoff) )) ;; no numlock warning when using keypad numbers possible
  .ff15c (tap-hold 1 $200  @.CAPSoff (layer-while-held numberline))

;; *** MACRO + F-Keys layer *** TIP removing one-shot solves problems with hitting the key by accident - F21 is not used in ahk in just consumes a key press TODO solve it without F21
  .ff13 (multi F21 
               (on-press release-virtualkey vcaps )
			   (layer-switch base)
			   @.nln
			   (layer-while-held fkeymacro)
		)
  .nav   (tap-hold  $200 $200 spc (fork (multi nop1 @.num) (multi @.num @.sym) (rsft))) ;; RIGHT sft + RIGHT spc == symbols ; nop1 signals layer switch 
  .nav-typing   (tap-hold  $200 $200 (multi @.basen spc) (fork @.num @.sym (rsft))) 
;; *** ONE SHOT MODIFIERS ***
  .oss   (tap-hold $200 $300 @.cwl lsft) ;; use caps words on non base layer
  .cabs  (tap-hold $200 $300 @.CAPSon lsft)
  .scabs (tap-hold $200 $300 @.CAPSoff lsft) ;; inverted Shift for cabs layer
  .osss  (one-shot 2000 lsft)
;;.ocl   (one-shot 2000 lctl) 
  .oal   lalt ;; not used but causes trouble when hit by accident (one-shot 2000 lalt)
  .oml   (one-shot 2000 lmet) ;; TODO-usage

  ;; disalble tap-hold keys if typing rapidly but reenable after a shord idle period
  .tp (multi
    ;;(layer-switch typing) ;; one-shot fixes Tte into TE 
	(one-shot 95 (layer-while-held typing))
    (on-idle  95 tap-virtualkey to-base )
  )
  .tpe (multi
    (one-shot $145 lsft)
	;;(layer-switch typing)
	;;(on-idle  95 tap-virtualkey to-base )
  )
  ;; modded german key aliases 
  .' S-#
  .+ +
  .* S-+
  ._ S--
  .~ RA-+
  .| RA-102d
  .} RA-0   ;; TIP/BUG C-A- works with rdp but not in windows terminal   C-A- 7 8 9 0 shortcuts must be deleted
  .{ RA-7
  .] RA-9
  .[ RA-8
  .\ RA-ß         ;;(unicode \) INFO has been better in some environments in the past
  .ẞ RA-S-ß
  .€ (unicode € ) ;; (macro RA-e )
  .@ RA-q         ;; INFO (unicode @ ) will mess up keyhistory but may be better on non wintercept
  .² RA-2
  .³ RA-3
  .µ RA-m
  .! S-1
  .˝ S-2  ;; ˝ look-a-like is used because @." is no valid alias, to be displayed correctly in console requires a font that can - e.g. cascadia
  .§ S-3
  .$ S-4
  .% S-5
  .& S-6
  ./ S-7
  .◖ S-8  ;; ◖ look-a-like is used because @.( is no valid alias, to be displayed correctly in console requires a font that can - e.g. cascadia
  .◗ S-9  ;; ◗ look-a-like is used because @.) is no valid alias, to be displayed correctly in console requires a font that can - e.g. cascadia
  .= S-0
  .? S-ß
  .; (macro S-, )
  .: (macro S-. )
  .> S-102d
  .< 102d   ;; not really needed because < is a deflocalkey but having @.< and @.> looks consistent
  
  ;; **** dead keys to normal keys ****
  .´ (macro = spc)
  .` (macro S-´ spc)
  .^ (unicode ^)       ;; ^ = \ - shifting (macro grv spc) will produce an incorrect space now: "° " TODO unicode may prevent shortcuts
  .° (macro S-grv)
  ;;.F20 (macro F20) ;; ahk unused
  ;;.F19 (macro F19) ;; ahk unused
  ;;.ä (macro ') 
  ;;.ü (macro [)
  ;;.ö (macro ;) 
  
  ;; mouse buttons
  .🖰l mlft ;;M-C-A-f ;; using AHK to do the click
  .🖰r mrgt ;;M-C-A-d
  .🖰m mmid ;;M-C-A-s
  
  
  ;; outer/special keys
  .tab (tap-hold-press  $200 $400 tab lctl )	;; TODO-usage is ctl ever used?
  .rtc (tap-hold-release $200 5000 ret lctl) ;; done with QMk
  .rtw del ;; TODO find a use for this key
  .rsd (tap-hold-release $200 $240 @.syv (multi rsft lsft)) ;; TODO not used ?! BUG rsft get ignored on RDesktop -> use lsft  or (multi rsft lsft) ?
  .ral S-C-M-A-9 ;; release ALL key (BUG) kanata cannot release stuck keys from ahk (both tools with elevated rights) PRESS F24 FOR RELEASE ALL MODS
  
  ;; *** AUTOSHIFT in number row ***
  ;;ech (tap-hold $140 $400 esc (multi (macro home ) (tap-hold $400 $900 XX (macro end ) )) ) ;; not used
  ;;^ec (tap-hold $200 $300 esc @.^) ;; TODO not used replaced by esc. a relict of 40% boards (fkeys/numberline)
  ;; INFO number rom with autorepeat
  .^0 (tap-hold $400 $300 0 (fork @.^ @.° (lsft rsft)))  
  .1  (tap-hold $400 $500 1 (macro S-1 ))
  .2  (tap-hold $400 $300 2 (multi @.˝ (tap-hold $200 $700 XX @.˝ )) )
  .3  (tap-hold $400 $300 3 (macro S-3 ))
  .4  (tap-hold $400 $500 4 (macro S-4 ))
  .5  (tap-hold $400 $500 5 (macro S-5 ))
  .6  (tap-hold $400 $500 6 (macro S-6 ))
  .7  (tap-hold $400 $500 7 (macro S-7 ))
  .8  (tap-hold $400 $500 8 (macro S-8 ))
  .9  (tap-hold $400 $500 9 (macro S-9 ))
  .0  0
  
  ;; *** number aliases for use inside macros ***
  .n1 1
  .n2 2
  .n3 3
  .n4 4 
  .n5 5 
  .n6 6 
  .n7 7 
  .n8 8 
  .n9 9 
  .n0 0
  ;; *** keypad/homerow mod aliases uses in layer numberline *** TODO NUMLOCK must be enforced
  .k1 (tap-hold $200 $500 Numpad1 lmet)
  .k2 (tap-hold $200 $500 Numpad2 lalt)
  .k3 (tap-hold $200 $500 Numpad3 lctl)
  .k4 (tap-hold $200 $500 Numpad4 lsft)
  .k5 (tap-hold $200 $500 Numpad5 lmet)
  .k6 (tap-hold $200 $500 Numpad6 lmet)
  .k7 (tap-hold $200 $500 Numpad7 lsft)
  .k8 (tap-hold $200 $500 Numpad8 lctl)
  .k9 (tap-hold $200 $500 Numpad9 lalt)
  .k0 (tap-hold $200 $500 Numpad0 lmet)
  
  ;; *** dynamic-macro TODO  use them ***
  .dr1 (dynamic-macro-record 1)
  .dr2 (dynamic-macro-record 2)
  .dr3 (dynamic-macro-record 3)
  .dr4 (dynamic-macro-record 4)
  .dr5 (dynamic-macro-record 5)
  .dp1 (dynamic-macro-play 1)
  .dp2 (dynamic-macro-play 2)
  .dp3 (dynamic-macro-play 3)
  .dp4 (dynamic-macro-play 4)
  .dp5 (dynamic-macro-play 5)
  .dms dynamic-macro-record-stop
  .dst (dynamic-macro-record-stop-truncate 1)
  
;; *** HOME ROW MODS *** 
;; BUG t   (tap-hold 1 $160 (multi t @.tp) (multi rsft (tap-hold 1 $900 XX (layer-while-held notp))) ) ;; rsft ,rctl have RDP problems without interception
;; TODO try to use tap-hold-except-keys instead 
;; INFO e and t have special treatment for fast typing layer TODO-Usage .tpe what does it fix? EH ET ER
  .e]   (tap-hold 1 $180 (fork e (multi e nop7 @.tpe) (rsft)) (multi nop6 lsft) ) ;;(tap-hold 1 $160 (multi  @.tp e) lsft ) ;; (outdated BUG) als erstes muss der Wechsel nach typing erfolgen sonst EIn 
  .t/   (tap-hold 1 $160 (multi t @.tp) rsft ) ;; rsft ,rctl have RDP problems without interception
  ..e]  (tap-hold 1 $160 e lsft ) ;; als erstes muss der Wechsel nach typing erfolgen sonst EIn 
  ..t   (tap-hold 1 $160 t rsft ) ;; rsft ,rctl have RDP problems without interception  
  .i[   (multi (tap-hold 1 $300 (fork (fork i spc (nop6)) (unicode i) (nop7)) (multi @.base lctl) ) @.tp) ;; BUG unshift in stead of unicode leads to strange errors TODO-Usage lsft + i = space 
  ..i[  (tap-hold $500 $500 i lctl )
  ..[   (tap-hold $500 $500 @.[ lctl ) ;; used on symbol layer
  ..-   (tap-hold $500 $500 - lctl )
  ..n   (tap-hold $500 $500 n rctl )    
  .n-   (multi (tap-hold 1 $300 n (multi @.base rctl) ) @.tp)
  ;; Bug in no interception rctl+y  to start ditto, then ditto will not act on keyboard input 
  ;; also RDP ignores rctl and rsft but adding to defsrc  will not solve the issue
  .s^⎇  (tap-hold 1000 1000 (t! same-side-lshift (multi  s @.tp) nop6 (unmod end) ) (multi @.base alt)) ;; must multi tp be the first action?
  .s⎇   (tap-hold 1000 1000 s alt)
  .h⌘   (tap-hold $350 1000 h lmet)
  .c⌘   (tap-hold 1000 1000 (t! same-side-lshift c nop6 (unmod home)) lmet)
  .r_⎇  (multi (tap-hold-release $450 1000 r (multi @.base lalt)) @.tp)
  .rsf  (tap-hold-release $350 $500 - rsft)
  .rsfb (tap-hold-release $350 $500 - (multi rsft (layer-while-held notp)))

  ;; chords
  _g    (chord fkomma g)  ;; F24
  _,    (chord fkomma ko)  
  _.    (chord fkomma .)  ;; Q alternative
  _v|   (chord vüä v)		;; sticky numbers
  _ä}   (chord vüä ä)
  _ü{   (chord vüä ü)
  _V|   (chord VÜÄ v)		;; sticky numbers
  _Ä}   (chord VÜÄ ä)
  _Ü{   (chord VÜÄ ü)
  _7    (chord exit79 7)	;; exit numbers
  _8    (chord exit79 8)
  _9    (tap-hold 1 $200 (chord exit79 9) @.basen)
  _|    (chord |} <)      ;; mods will be added later in defchord < is | 0 is }
  _}    (tap-hold 1 $200 (chord |} 0) (release-layer symbols)) ;; tap-hold to exit layer
  ..]   (tap-hold 1 $200 @.] (release-layer symbols)) ;; Go bach to number layer TODO remember this
  _z˝   (chord zu $z)
  _u◖   (chord zu u)
  
  ;; normal keys
  .j!   (tap-hold 1 $120 
		(switch
			((and (key-history ralt 2)(key-history q 1))) @.@ break
			((and (key-history lsft 2)(key-history 1 1))) (macro @.!) break    
			() j break ;; * with long autorepeat - there must be a macro (@.*) after the multi for the timeout do work
		) 
		(multi (macro @.!) (tap-hold $200 $800 XX (macro bspc @.@ )))
  )
  ..z˝  (t! key-hold-repeat $140 $400 $z @.˝ @.˝ XX lsft 2 ($off) XX)
  .z˝tp (multi @..z˝ @.tp)             
  ..u◖  (t! key-hold-repeat $150 $400 u @.◖  @.◗ XX lsft 8 ($off) XX)                        ;; (  ()
  ;; TIP a◗ (multi (tap-hold 1 $150  a  S-9) @.tp) this order works with powertoys but causes problems with RDP ua vs au
  ;; TIP a◗ LONG HOLD with no Powertoys running (tap-hold 1 $150 (multi a @.tp) (fork (macro-release-cancel S-9 $600 bspc RA-9 ) C-a (lctl rctl)) )                   ;; ) [ todo find a better use
  ..a◗  (t! key-hold-repeat $150 $800 a @.◗ XX XX lsft 9 ($off) XX)
  .a◗   (multi @..a◗ @.tp)
  .y$   (t! key-hold-repeat $140 $800 $y @.$ @.$ XX lsft 4 ($off) XX)
  ..p&  (t! key-hold-repeat $160 $800 p @.& @.& XX lsft 6 ($off) XX)  ;; & TODO is switching @.tp position relevante for RDP or Powertoys
  .p&   (multi @..p& @.tp)
  .l?   (multi (t! key-hold-repeat $140 $800 l @.? @.? XX lsft ß ($off) XX) @.tp)     ;; ? = S-ß = S-[      i ? ??
  .m\   (multi (t! key-hold-repeat $160 $800 m @.\ @.\ XX ralt ß ($off) XX) @.tp)
  .ß    (macro (unshift ß))
  .k    (macro k)
  ..f#  (t! key-hold-repeat $140 $800 f # XX XX XX # ($off) XX)
  .f#   (multi @..f# @.tp)
  .w%   (t! key-hold-repeat $140 $800 w @.%  @.% XX lsft 5 ($off) XX)
  .q@   (t! key-hold-repeat $160 $800 q RA-q XX XX ralt q ($off) XX) 
  .o'   (t! key-hold-repeat $160 $800 o S-#  S-# XX lsft # ($off) XX)
  .d/   (t! key-hold-repeat $200 $800 d S-7  S-7 XX lsft 7 ($off) XX)
  .v|   (t! key-hold-repeat $200 $800 v @.| @.| XX ralt < (ü 8) del) 
  .x`   (tap-hold 1 160 ;; tap=x or hold=` or long=``` hold+tap...=`````` INFO no autorepeat
			(switch 
				((and (key-history nop5 1)(key-history ´ 3)(key-history spc 2)))  (multi lsft ´ spc nop5) break
				() x break
			)
			(fork (multi lsft ´ spc nop5  (tap-hold $200 $800 XX (multi (unicode ` ) (unicode ` )))) (macro S-x) (lsft rsft))
	    )                   
  .ü{   (t! key-hold-repeat $200 $500 ü RA-7 RA-0 XX ralt 7 (v) XX)								;; { {}
  ;;INFO ä}  (tap-hold-release-timeout $200 $400 ä @.syvv @.} ) ;; layer activation if ä is comboed;  not needed on v20 bc of second space bar
  .ä}   (t! key-hold-repeat $140 $800 ä RA-0 XX XX ralt 0 (v) XX) ;; der v XX scheint überflüssig zu sein
  .ö+   (t! key-hold-repeat $180 $800 ö + + XX XX + ($off) XX)
  .b=== (tap-hold 1 $180 b (macro-release-cancel @.= $500 @.= $900 @.=))
  .b=   (switch ;; b = == === hold+hold= autorepeat =======
			((and (key-history lsft 6) (key-history 0 5) (key-history lsft 4) (key-history 0 3) (key-history lsft 2) (key-history 0 1) )) b break
			((and (key-history lsft 2)(key-history 0 1)))  @.= break    
			()	@.b=== break
		)
  _g*   (switch ;; g hold=* long=autorepeat
			;;((input virtual forkme)) , break ;; TODO does nothing
			((and (key-history lsft 3)(key-history + 2)(key-history . 1))) S-+ break
			((and (key-history lsft 2)(key-history + 1))) S-+ break    
			()	(tap-hold 1 $160 @_g (multi (macro S-+ ) (tap-hold 1 $800 XX S-+ )))  break ;; there must be a macro (@.*) after the multi for the timeout do work
		)
;; TODO layer-toggle shoud break key-history - implemented in @nav by multi nop1
  ,;<  (tap-hold  1 $140 (tap-dance $140 (
							(switch
								((and (key-history lsft 2)(key-history , 1))) S-, break
								((and (or (key-history lsft 2)(key-history rsft 2)(key-history lalt 2)(key-history ralt 2)) (key-history 102d 1))) @_, break
								((key-history 102d 1)) @.< break  
								()	@_, break 
							)
							(tap-hold 10 $100 (switch
												((and (key-history lsft 2)(key-history , 1))) (macro S-, S-,) break
												((key-history 102d 1)) (macro @.< @.<) break
												() (macro , ,) break
											 )
											 (macro @.<)                               ;;  double-tap-hold < 
							)
						  )
						)
						;; hold
						(switch
							((and (key-history lsft 2)(key-history , 1))) S-, break    ;;  hold hold ; ;;;;;
							((key-history 102d 1)) @.< break ;;??? hold < <<<<<
							((and (key-history , 2)(key-history , 1))) , break         ;;  tap hold  , ,,,,, (autorepeat)
							()	(multi @.; (tap-hold $200 $800 XX (macro bspc @.< )))  break ;; Long_Hold
						)	
		) 
		 
  .:>  (tap-hold  1 $100 (tap-dance $140 (
							(switch
								((and (key-history lsft 2)(key-history . 1))) S-. break
								((and (or (key-history lalt 2)(key-history ralt 2)) (key-history 102d 1))) @_. break
								((and (key-history lsft 2)(key-history 102d 1))) @.> break
								((and (key-history 102d 1))) @.> break
								((and (key-history - 1))) @.> break
								()	@_. break 
							)
							(tap-hold 10 $100 (switch                                         ;; double-tap-hold = > tripple-tap-hold = .......
												((and (key-history lsft 2)(key-history . 1))) (macro S-. S-.) break
												((key-history 102d 1)) (macro @.> @.>) break
												() (macro . .) break
											 )
											 (macro @.>)
							)    
						)) 
						(switch
							((and (key-history lsft 2)(key-history . 1))) S-. break    ;;  hold hold : :::::
							((and (key-history lsft 2)(key-history 102d 1))) @.> break ;;??? hold > >>>>>
							((key-history . 1)) .   break ;; . .....
							((key-history - 1)) @.> break ;; -> with hold >
							()	(multi @.: (tap-hold $200 $800 XX (macro bspc @.> )))  break ;; Long_Hold
						)			
	   )
  -_~  (tap-hold  1 $100 ;; / = -  ~ = RA-+ TODO no double-tap-hold is that consistent?
			(switch
				((and (key-history ralt 2)(key-history + 1))) @.~ break
				((and (key-history lsft 2)(key-history / 1))) S-/ break    
				()	/  break
			)
			(switch
				((and (key-history ralt 2)(key-history + 1))) @.~ break
				((and (key-history lsft 2)(key-history / 1))) S-/ break 
				((key-history / 1)) / break ;; order after S-/
				() (multi (macro @._) (tap-hold $200 $800 XX (macro bspc @.~ ))) break
			)
	   )
  .nn  (tap-hold 0 200 n ;; unused TODO find a use case for one key multiple layers (LSPACE is doing this now)
						(tap-hold-release-timeout 0 400
							(layer-while-held symbols)
							(layer-while-held symbols) (layer-while-held numbers))
		)
)
;; from NUMFIX to BASE
(defchords exit79 20
  (7    ) 7
  (  8  ) 8
  (    9) 9
  (7   9) @.basen
  (7 8  ) del
  (  8 9) bspc
  (7 8 9) C-bspc
)
;; from BASE to NUMFIX  THis seems to be the principal way : put chord in layer and call alias here (it also keeps the aliases clean) 
(defchords vüä 50
  (v      ) @.v|
  (   ä   ) @.ä}
  (v  ä   ) @.numfix
  (     ü ) @.ü{
  (v    ü ) del
  (   ä ü ) bspc
  (v  ä ü ) C-bspc
)
(defchords VÜÄ 50
  (v      ) @.V|
  (   ä   ) @.Ä}
  (v  ä   ) (multi @.CAPSoff @.numfix)
  (     ü ) @.Ü{
  (v    ü ) del
  (   ä ü ) bspc
  (v  ä ü ) C-bspc
)
(defchords zu $150 ;; long timer to use combos to prevent accidential hold
  ($z     ) @.z˝tp
  (   u   ) @..u◖
  ($z u   ) (macro $z (unmod u))
)
;; from SYMBOLS to NUMFIX CA(0) = }  CA(<) = | chord must be defined on the not modified keys
;; not needed anymore
(defchords |} 140
  (0      ) @.}
  (   <   ) @.|
  (0  <   ) @.numfix
)
;; TODO F24 and ESC are not really used
(defchords fkomma 20
  (g        ) g
  (   ko    ) ,
  (g  ko    ) esc
  (       . ) .
  (   ko  . ) F24
)
;; defsrc querty laptop + und ß (x und y) sind ggf. vertauscht 
#|(defsrc querty laptop
  esc       F1   F13  F16  F24
  ^         1    2    3    4    5    6    7    8    9    0    ß    ´    bspc
  tab       q    w    e    r    t    y    u    i    o    p    ü    +    #
  caps      a    s    d    f    g    h    j    k    l    ö    ä    ret
  lsft      z    x    c    v    b    n    m    ,    .    -    rsft
            lmet lalt      F14       spc            F15                           
) |#

;; defsrc for ansi german NOTED layout  
;; If you are looking for other keys, the file src/keys/mod.rs should hopefully provide some insight.
;; z and y are FLIPPED, positioning has no meaning but must be consistent with other layers
;; F1 unused / F24 declaration is required with process-unmapped-keys no? /   F13 = right-B  / F14 = left-Space
(platform (wintercept)
(defsrc
  esc       F1   F13  F16  F24
  grv         1    2    3    4    5    6    7    8    9    0    +    ´    ⌫
  tab       j    z    u    a    y    p    f    l    m    w    q    ß    #
  caps      c    s    i    e    o    d    t    n    r    h    k    ret
  lsft      x    v    ü    ä    ö    b    g    ,    .    -    rsft
            lmet lalt      F14       spc            F15                           
))
;; there is no platform difference currently as y z are handeled in deflocalkeys
(platform (win)
(defsrc
  esc       F1   F13  F16  F24
  ^         1    2    3    4    5    6    7    8    9    0    +    ´    ⌫
  tab       j    z    u    a    y    p    f    l    m    w    q    ß    #
  caps      c    s    i    e    o    d    t    n    r    h    k    ret
  lsft      x    v    ü    ä    ö    b    g    ,    .    -    rsft
            lmet lalt      F14       spc            F15                           
))
(platform (winiov2)
(defsrc
  esc       F1   F13  F16  F24
  ^         1    2    3    4    5    6    7    8    9    0    +    ´    ⌫
  tab       j    y    u    a    z    p    f    l    m    w    q    ß    #
  caps      c    s    i    e    o    d    t    n    r    h    k    ret
  lsft      x    v    ü    ä    ö    b    g    ,    .    -    rsft
            lmet lalt      F14       spc            F15                           
))

(defvirtualkeys
    ã (unicode ã)
	Ã (unicode Ã)
)

(defseq
    ã (S-1 a)
    Ã (S-1 S-a)
)
;;(macro (sequence 2500 hidden-delay-type) 10 S-grv)
;; or (macro sldr 10 S-grv)


;; INFO did lmet, lalt not being one-shot / not incluing lctl solve any problems? ANSWER didn't solve any problems
;; BUG/TODO-Usage rsft +... rspace +... rstf-up = @.sym not used and has BUG with RAlt-keys like [] if rsft is not released.
;; INFO feat: rpt will repeat the unmodified key / rpt-any fails to repeat complex tap-hold sequences
(deflayer base
;;****************   BASE   ********************************************************
;; TODO ONLY c s i n r h  have dbl_tap autorepeat
;; lspc + rspc = mouse
;; rsft + rspc = symbols
;; sft+lspc = CAPSlayer / lspc+D = Desktop Cycle
;; F13 (right-B) = macro layer
;; F14 = left-Space = symbol layer / lsft+F14 = hold F14 = number layer
;; ret hold does ctl via QMK
  esc       F1    @.ff13 @.ff16 F24
  @.^0     @.1   @.2    @.3   @.4    @.5   @.6     @.7    @.8    @.9    @.0     @.dp1   prtsc    bspc
  @.tab     @.j!  @_z˝   @_u◖  @.a◗   @.y$  @.p&    @.f#   @.l?   @.m\   @.w%    @.q@    @.ß      F24
  @.atx     @.c⌘  @.s^⎇  @.i[  @.e]   @.o'  @.d/    @.t/   @.n-   @.r_⎇  @.h⌘    @.k     ret
  _         @.x`  @_v|   @_ü{  @_ä}   @.ö+  @.b=    @_g*   @,;<   @.:>   @-_~    @.rsfb
            @.oml @.oal  @.ff14             @.nav          @.ff15   
#|
            lmet lalt           @.nav
 CTRL + SPACE + ESC => Exit KANATA immediatly
 AltGr = F15 or qmk symbols|#
)
;; ************** GAME ***************** unused
(deflayermap (game)
  j q
  u w
  s a
  i s
  e d
  z q
  a e
  F14 spc
  F15 (layer-switch base)
)
;; *** Base layer variant that does not switch to fast typing layer used by RSFT ***
(deflayer notp
  esc _ _ _ _
  @.^        @.1   @.2     @.3     @.4    @.5   @.6    @.7    @.8   @.9   @.0   -    del  bspc
  _          @.j!  @..z˝   @_u◖    @..a◗  @.y$  @..p&  @..f#  @.l?  @.m\  @.w%  @.q@ @.ß  @.rtw
  _          @.c⌘  @.s⎇    @..i[   @..e]  @.o'  @.d/   @..t   @..n  @.r_⎇ @.h⌘  @.k  ret
  @.cabs     @.x`  @_v|    @_ü{    @_ä}   @.ö+  @.b=   @_g*   @,;<  @.:>  @-_~  @.rsf
             _     _       _       _            _   
)
;; *** UPPER CASE LAYER - use spc to exit -  hold spc to exit w/o spc TODO shift into lower case does not work ***
;; scabs Shift cabs and QMK lsft Home interfere
(deflayer (CAPS icon caps.ico)
  esc _ _ _ _
  @.^        @.1   @.2    @.3   @.4    @.5   @.6   @.7   @.8   @.9   @.0   -     del  bspc
  _          @.J   @.Z˝   @.U◖  @.A◗   @.Y$  @.P&  @.F#  @.L?  @.M\  @.W%  @.Q@  @.ß  @.rtw
  _          @.C⌘  @.S    @.I[  @.E]   @.O'  @.D/  @.T   @.N   @.R   @.H⌘  @.K   ret
  @.scabs    @.X`  @_V|   @_Ü{  @_Ä}   @.Ö+  @.B=  @.G*  @,;<  @.:>  @-_~  @.rsf
             _     _      @.ff14c      _           @.ff15c   
)
;; *** UPPER CASE ALIASES for CAPS layer ***
(defalias
  .Y$  (switch
  		(rsft lsft) (unshift $y) 		break
  		(rctl lctl) (unshift $y)		break
  		() 	(tap-hold 1 $200 (unicode Y) (macro @.$))	break
  )
  .C⌘ (switch
  		(rsft lsft) (unshift c) 		break ;; Shift on caps-layer become lowercase again
  		(rctl lctl) (unshift c)			break ;; do Ctrl+C instead of Ctrl+Shift+C
  		() 			(tap-hold 1 $200 S-c @.`)	break
  )
  .E]  (switch
          (rsft)  (tap-hold 1 $200 (unshift e) (layer-switch base) ) break
          ()  (tap-hold 1 $200 S-e lsft)  break 
       )
  .T   (switch
          (lsft)  (tap-hold 1 $200 (unshift t) (layer-switch base) ) break
          ()  (tap-hold 1 $200 S-t rsft)  break 
       )
  .Z˝  (fork (tap-hold 1 $200 (unicode Z) (macro @.˝)) (unshift z) (rsft lsft))
  .K   (fork (macro S-k)                         (unshift k) (rsft lsft))
  .J   (fork (tap-hold 1 $200 S-j (macro @.!))   (unshift j) (rsft lsft))
  .U◖  (fork (tap-hold 1 $200 S-u (macro @.◖))   (unshift u) (rsft lsft))
  .A◗  (fork (tap-hold 1 $200 S-a (macro @.◗))   (unshift a) (rsft lsft))	 
  .S   (fork (tap-hold 1 $200 S-s (macro @.^))   (unshift s) (rsft lsft))
  .I[  (fork (tap-hold 1 $200 S-i (macro @.[))   (unshift i) (rsft lsft))
  .P&  (fork (tap-hold 1 $200 S-p (macro @.&))   (unshift p) (rsft lsft))
  .F#  (fork (tap-hold 1 $200 S-f (macro #))     (unshift f) (rsft lsft))
  .L?  (fork (tap-hold 1 $200 S-l (macro @.?))   (unshift l) (rsft lsft))
  .M\  (fork (tap-hold 1 $200 S-m (macro @.\))   (unshift m) (rsft lsft))
  .W%  (fork (tap-hold 1 $200 S-w (macro @.%))   (unshift w) (rsft lsft))
  .Q@  (fork (tap-hold 1 $200 S-q (macro @.@))   (unshift q) (rsft lsft))
  .O'  (fork (tap-hold 1 $200 S-o (macro @.'))   (unshift o) (rsft lsft))
  .D/  (fork (tap-hold 1 $200 S-d (macro @./))   (unshift d) (rsft lsft))
  .N   (fork (tap-hold 1 $200 S-n (macro -))     (unshift n) (rsft lsft))
  .R   (fork (tap-hold 1 $200 S-r (macro @._))   (unshift r) (rsft lsft))
  .H⌘  (fork (tap-hold 1 $200 S-h (macro S-.))   (unshift h) (rsft lsft))
  .X`  (fork (tap-hold 1 $200 S-x (macro ´))     (unshift x) (rsft lsft))
  .V|  (fork (tap-hold 1 $200 S-v (macro @.|))   (unshift v) (rsft lsft))
  .Ü{  (fork (tap-hold 1 $200 S-ü (macro @.{))   (unshift ü) (rsft lsft))
  .Ä}  (fork (tap-hold 1 $200 S-ä (macro @.}))   (unshift ä) (rsft lsft))
  .Ö+  (fork (tap-hold 1 $200 S-ö (macro @.+))   (unshift ö) (rsft lsft))
  .B=  (fork (tap-hold 1 $200 S-b (macro @.=))   (unshift b) (rsft lsft))
  .G*  (fork (tap-hold 1 $200 S-g (macro @.*))   (unshift g) (rsft lsft))
)
;; *** fast Typing layer - prevents Upper Case within words when typing fast ***
;; INFO unmod seems to solve RDP issues
(deflayer typing
;;****************   typing   ********************************************************
  esc _ _ _ _
  @.^     @.1       @.2        @.3       @.4       @.5        @.6       @.7       @.8       @.9       @.0       -         del      bspc
  _      (unmod j) (unmod $z) (unmod u) (unmod a) (unmod $y) (unmod p) (unmod f) (unmod l) (unmod m) (unmod w) (unmod q) (unmod ß) @.rtw
  _      (unmod c) (unmod  s) (unmod i) (unmod e) (unmod  o) (unmod d) (unmod t) (unmod n) (unmod r) (unmod h) (unmod k)  ret
  @.osss (unmod v) (unmod  x)  @.ü{      @.ä}      @.ö+      (unmod b) (unmod g)  @,;<      @.:>      @-_~      @.rsf
          lmet      lalt       _         @.nav-typing         _              
)

;;***  NUMBERS   ***
(defalias
  .⎈␡ (switch
		(lctl rctl) $y break
		() C-bspc break
  )
;; @.7v ,:x .⌘c to enable copy paste
  _7v	(switch  ;; prefer paste = ctl+v on number layer over ctl+7
	      (lctl rctl) v break
	      () @_7 break
		)
  ,:x	(switch
			(lctl rctl) x break
			() (tap-hold  1 $600 , @.: ) break
		)
  -_:  (tap-hold  1 $100 (tap-dance $140 (/   (tap-hold 10 $100 (macro / /)  @.:) (tap-hold 10 $100 (macro / / /) /) )) (multi (macro @._) (tap-hold $200 $800 XX (macro bspc S-. ))) )

;; number layer home row mods
  .6⇧ (tap-hold-release $200 $300 6 lsft)
  .5⎈ (tap-hold-release $200 $300 5 lctl)
  .4⎇ (tap-hold-release $200 $340 4 lalt)
  .⌘c (switch
		(lctl rctl) c break ;; perfer Copy over ctl+.
		() (tap-hold-release $200 $240 . lmet) break
	   )
  .⌘ (tap-hold-release $200 $240 . lmet)
  .⌘0 (tap-hold-release $200 $340 0 lmet)  ;; BUG on QUERTY unused because of Win+G gets triggered on querty 
 
 ;; RI modifiers for numpad
  .⏎⇧ (tap-hold-release $200 5000 ret lsft)
  .␡⎈ (tap-hold $200 $200 del lctl) ;; BUG kanata mouse not working somtimes? TODO the DEL is not used here.  
  .l🖰⎇ (tap-hold-release $200 5000 @.🖰l lalt) ;; mouse lclick (TODO not used anymore) or alt
  .r🖰⌘ (tap-hold-release $200 5000 @.🖰r lmet) ;; mouse rclick (TODO not used anymore) or win 
)
(deflayer (numbers icon numbers.ico)
;;****************   NUMBERS   ****************************************************
;; TODO-Usage: caps to sym / C-bspc = @.⎈␡ or 7+8+9  
  esc _ _ _ _
  @.^       @.1    @.2    @.3   @.4   @.5     @.6   @.7   @.8   @.9   @.0    @.cmdrld  A-prtsc _
  _         @-_:   1      2     3     @.⎈␡    esc   home  ▲     end   pgup   pgdn      _       _
  @.atr     @.⌘c   @.4⎇   @.5⎈  @.6⇧  0       bspc   ◀    ▼     ▶     lmet   @.fky     _
  @.atp     @,:x   @_7v   @_8   @_9   del     tab   @.⏎⇧  @.␡⎈  @.l🖰⎇ @.r🖰⌘ _
            _     _    _         _    _              
)
;; Exit numfix with CAPS or HOLD SPACE or HOLD Null or 7+9
(deflayer (numfix icon numfix.ico)
;;****************   NUMBERS(fix)   ********************************************************
;; Exit numfix with HOLD SPACE or HOLD Null or 7+9 or F13
;; INFO grv as dead key for â ô, LEFT_Spacebar = 0
  esc       F1   @.ff13 _   F24
  grv       @.1   @.2   @.3   @.4   @.5    @.6  @.7   @.8    @.9   @.0     (layer-switch game) A-prtsc _
  _         @-_:  1     2     3     @.⎈␡   home home  ▲      end   pgup    pgdn      _       _
  @.sy1     @.⌘c  @.4⎇  @.5⎈  @.6⇧  0      bspc  ◀    ▼      ▶     esc     @.fky     _
  _         @,:x  @_7   @_8   @_9   del    tab  @.⏎⇧  @.␡⎈   @.l🖰⎇ @.r🖰⌘  _
            _     _   (tap-hold  $200 $200 @.0 @.basen)    (tap-hold  $200 $200 spc @.basen)  _                 
)

(defalias
;;**************** NUMBERSTAB or LEFT HAND COURSOR KEYS by Using aup *********************************************
  .aup  (on-press release-virtualkey alt)  ;; to exit the alt-tab dialog but stay in the layer 
  .eah (fork home (multi esc @.aup) (lalt))
  .eae (fork end  (multi esc @.aup) (lalt))
  .atxx (multi
			(layer-while-held numberstab)
			(on-press press-virtualkey alt )
			(on-press tap-virtualkey tab )
			(on-press tap-virtualkey tab )
			(on-release release-virtualkey alt )   
  ) 
  .atx (tap-hold $200 $150 (multi lalt tab) @.atxx ) ;; alt tab by hold caps
  .atr (multi @.numtab lalt (macro pgup) ) ;; atx for RDP
  .atm  (tap-dance $300 ( A-tab (macro A-( 10 tab 10 tab )) (macro A-( 10 tab 100 tab  100 tab )) (macro A-( 10 tab 100 tab 100 tab 100 tab )) ))
  .atp  (tap-dance $300 ( A-pgup (macro A-( 10 pgup 10 pgup )) (macro A-( 10 pgup 100 pgup  100 pgup )) (macro A-( 10 pgup 100 pgup 100 pgup 100 pgup )) )) ;;TODO try on RDP
  
  ;; alt tab number - (multi lalt tab tab ...) does not work anymore
  .at1 A-tab                                                                        ;;(multi lalt tab)
  .at2 (macro A-( 10 tab 100 tab ))                                                 ;;(multi lalt tab tab)
  .at3 (macro A-( 10 tab 100 tab 100 tab         ))                                 ;;(multi lalt tab tab tab)
  .at4 (macro A-( 10 tab 100 tab 100 tab 100 tab ))                                 ;;(multi lalt tab tab tab tab)
  .at5 (macro A-( 10 tab 100 tab 100 tab 100 tab  100 tab))                         ;;(multi lalt tab tab tab tab tab)
  .at6 (macro A-( 10 tab 100 tab 100 tab 100 tab  100 tab 100 tab))                 ;;(multi lalt tab tab tab tab tab tab)
  .at7 (macro A-( 10 tab 100 tab 100 tab 100 tab  100 tab 100 tab 100 tab))         ;;(multi lalt tab tab tab tab tab tab tab)
  .at8 (macro A-( 10 tab 100 tab 100 tab 100 tab  100 tab 100 tab 100 tab 100 tab)) ;;(multi lalt tab tab tab tab tab tab tab tab)
  .at9 (macro A-( 10 tab 100 tab 100 tab 100 tab  100 tab 100 tab 100 tab 100 tab 100 tab)) ;;(multi lalt tab tab tab tab tab tab tab tab tab)

)
(deflayer (numberstab icon numberstab.ico)
;;**************** NUMBERSTAB LEFT HAND COURSOR KEYS by Using aup ********************************************************
;; TODO How usefull are the esc Keys?
  esc _ _ _ _
  grv       1     2    3      4     5      6    7    8   9     0     -      ´    bspc
  _         @.eah ▲    @.eae  esc   @.⎈␡   home home ▲   end   pgup  pgdn   _    _
  @.sy1     ◀     ▼    ▶      ▶     0      bspc ◀    ▼   ▶     esc   @.fky  _
  _         @,:x  ▼    ▼      ▼     del    tab  @.⏎⇧ @.␡⎈ @.l🖰⎇ @.r🖰⌘ _
            _     _    _      _            _                      
)
(deflayer (symbols icon symbols.ico)
;;****************   SYSMBOLS (start typing fast or it will get switched to numbers)  ********************************************************
;; get to @.numfix by tapping <7> + <9> or <|> + <}>
;; t = Desktop switch
;; ´ (S-´) as dead keys for é, è,...
  _ _ _ _ _
  _         @.at1  @.at2  @.at3  @.at4   @.at5    @.at6    @.at7    @.at8    @.at9   @.atm   @.cmdrld    A-prtsc    _
  _         @.!    @.˝    @.◖   @.◗      @.$      @.&      #        @.?      @.\     @.%     @.@         _          _         
  @.atr     @.`    @.^    @..[   @..]    @.'      @./      @.dsk    @..-     @._     esc     @.€         _             
  _         ´      @_|    @.{    @_}     @.+      @.=      @.*      @.<      @.>     @.~     _               
            _      _             _                esc               _    
)
(deflayer vsymbols ;; unused - symbols reached by hold of querty-v macro and symbols triggered from the LEFT side - not used on v20 and not complete (unicode Õ)... are for ahk integration
  _ _ _ _ _
  _         _    _    _    _    _    _    _    _    _    _   _    _    _   
  _  (unicode Ù) @.˝   @.◖   @.◗   @.$   @.&   #    @.?   @.\   @.%   _    _    _         
  _  (unicode Õ) @.@   @.[   @.]   @.'   @./   S-.  ,    .    @-_~ -    _          
  _         ´    @.|   @.{   @.}   @.+   @.=   @.*   @.<   @.>   ^    _               
            _    _     _           _           _
)
(deflayer (numberline icon numberline.ico)
;;***   Numberrow *** Functionrow *** Keypadrow  *** dynamic-macro *** TODO-Usage
;; TODO BUG numpad numbers don't work if layer is fixed because of the NUMLOCK Indicator
  esc _ _ _ _
  esc      @.dp1 @.dp2  @.dp3 @.dp4  @.dp5 @.dr1 @.dr2 @.dr3 @.dr4 @.dr5 @.dst @.dms bspc
  _        F1    F2     F3    F4     F5    F6    F7    F8    F9    F10   F11   F12   @.rtw
  _        @.k1  @.k2   @.k3  @.k4   @.k5  @.k6  @.k7  @.k8  @.k9  @.k0  esc   ret
  @.cabs   @.x`  @_v|   @_ü{  @_ä}   @.ö+  @.b=  @_g*  @,;<  @.:>  @-_~  @.rsf
           _     _      _     (multi spc @.basen)      @.basen
)
(deflayer (fkeymacro icon fkeymacro.ico);; macro F-keys and (symbols) triggered from the RIGHT side (ff13)
;;****************   MACRO   ********************************************************
;; b is on this layer to avoid typos 4      5        6      7       8
  _ _ _ _ _
  _         @.fashing @.geb @.iban  @.plz   _        M-tab  M-tab   _       _    _    _    _    _
  _         @.cmdde   F1   F2   F3   F10    C-S-F5   C-S-f  @.tsc   @.\     #    _    _    _         
  @.sy1     @.cmdiso  F4   F5   F6   F11    lmet     lsft   lctl    lalt    @-_~ _    _          
  _         ´         F7   F8   F9   F12    b        lctl   lalt    C-S-f   ^    _            
            _         _    _         _               _
)
(deflayer (mousefast icon mousefast.ico)
;;****************   MOUSE FAST  ********************************************************
  esc _ _ _ _
  ^        1     2     3     4      5     6        7   	    8      9		 0    -    ´   bspc
  tab      @.%%% @.slw @.sl% @.sl%  @.sl% @.setu   @.cll	@.🖰↑↑↑ @.clr	 z    q    +   @.mus+
  caps     XX    @.clm @.clr @.cll  XX    @.set    @.🖰←←←	@.🖰↓↓↓ @.🖰→→→	 h    k    ret
  lsft     @.msz lalt  lctl  lsft   XX    @.setd   @.🖰←     @.🖰↑   @.🖰→	 @-_: rsft
           lmet  lalt  @.clr                       @.cll     _                           
)
(deflayer (mouse icon mouse.ico)
;;****************   MOUSE   ********************************************************
  esc _ _ _ _
  ^        1     2     3     4      5     6        	7   	8     9		 0    -    ´    bspc
  tab      @.%%% @.slw @.sl% @.sl%  @.sl% @.basecm 	@.cll	@.🖰↑↑ @.clr	 z    q    +    @.mus+
  caps     XX    @.clm @.clr @.cll  XX    @.set    	@.🖰←←	@.🖰↓↓ @.🖰→→	 h    k    ret
  lsft     @.msz lalt  lctl  lsft   XX    @.🖰←     	@.🖰↑	@.🖰↓  @.🖰→	 @-_: rsft
           lmet  lalt  @.clr                     	@.cll   _                           
)
(deflayer (mouseslow icon mouseslow.ico)
;;****************   MOUSE SLOW  ********************************************************
  esc _ _ _ _
  ^         1     2      3      4      5     6        	7     	8   	9     	0		-    ´    bspc
  tab       @.%%% @.slw+ @.slw+ @.slw+ @.sl% @.basecm 	@.cll 	@.🖰↑	@.clr 	z    	q    +    @.mus
  caps      XX    @.clm  @.clr  @.cll  XX    @.set    	@.🖰←  	@.🖰↓	@.🖰→  	h    	k    ret
  lsft      @.msz lalt   lctl   lsft   XX    @.🖰←+    	@.🖰↑+ 	@.🖰↓+	@.🖰→+ 	@-_: 	rsft
            lmet  lalt   @.clr       @.cll             	_
)
(deflayer (mouseextraslow icon mouseextraslow.ico)
;;****************   MOUSE EXTRA SLOW  ********************************************************
  esc _ _ _ _
  ^         1     2      3      4      5    	6        	7    	8    	9     	0    -    ´    bspc
  tab       @.%%% @.slw+ @.slw+ @.slw+ @.sl% 	@.basecm 	@.cll	@.🖰↑+	@.clr 	z    q    +    @.mus
  caps      XX    @.clm  @.clr  @.cll  XX   	@.set    	@.🖰←+	@.🖰↓+	@.🖰→+ 	h    k    ret
  lsft      @.msz lalt   lctl   lsft   XX   	@.🖰←    	@.🖰↑+	@.🖰↓+	@.🖰→+ 	@-_: rsft
            lmet  lalt   @.clr       @.cll              	_
)
;; mouse layer keys
(defalias
  .basecm (multi @.basen  A-C-M-p) ;; clear akh mouse highlight
  .mus+ (multi (layer-switch mousefast) (on-release tap-virtualkey mouselight)) ;; powertoys mouse spotlight
  .mus  (multi (layer-switch mouse    ) (on-release tap-virtualkey mouselight))
  .ff16 (tap-dance-eager $150 (
             (tap-hold  $200 $200 @.mus+ XX) ;; holding activates QMK mouse
			 (tap-hold  $200 $200 @.basen XX)
	    ))
  .slw (layer-while-held mouseslow)
  .slw+ (layer-while-held mouseextraslow)
  .sl% (movemouse-speed 20)
  .s%% (movemouse-speed 20)
  .%%% (movemouse-speed 6)
  .set  (multi (setmouse 18228 32228) (on-release tap-virtualkey mouselight ))
  .setu (multi (setmouse 18228 16228) (on-release tap-virtualkey mouselight ))
  .setd (multi (setmouse 18228 48228) (on-release tap-virtualkey mouselight ))

;; idea: first mouse move in any direction fast than automaticly slower (but this requires 4 vkeys or 4+3+2+1 layers)
  .🖰↑ (multi (movemouse-up 9 3) (on-release tap-virtualkey mouselight ))
  .🖰← (multi (movemouse-left 9 3) (on-release tap-virtualkey mouselight ))
  .🖰↓ (multi (movemouse-down 9 3) (on-release tap-virtualkey mouselight ))
  .🖰→ (multi (movemouse-right 9 3) (on-release tap-virtualkey mouselight ))
  
  .🖰↑+ (movemouse-up 9 1)
  .🖰←+ (movemouse-left 9 1)
  .🖰↓+ (movemouse-down 9 1)
  .🖰→+ (movemouse-right 9  1)

  .🖰↑↑ (movemouse-accel-up 3 1000 1 9)
  .🖰←← (movemouse-accel-left 3 1000 1 9)
  .🖰↓↓ (movemouse-accel-down 3 1000 1 9)
  .🖰→→ (movemouse-accel-right 3 1000 1 9)
  
  .🖰↑↑↑ (multi (movemouse-accel-up    1 1000 1 9) (on-release tap-virtualkey mouselight ))
  .🖰←←← (multi (movemouse-accel-left  1 1000 1 9) (on-release tap-virtualkey mouselight ) (layer-switch mouseslow))
  .🖰↓↓↓        (movemouse-accel-down  1 1000 1 5)
  .🖰→→→ (multi (movemouse-accel-right 1 1000 1 5) (on-release tap-virtualkey mouselight ) (layer-switch mouseslow))
  
  
  .cll (multi @.basen @.🖰l A-C-M-p)
  .clr (multi @.basen @.🖰r A-C-M-p)
  .clm (multi @.basen @.🖰m A-C-M-p)
  
  .msz @.basen ;; this exit may not needed
  ;;TODO Double Click is missing
)

(defalias  
  ;; macros
  .del2  (macro bspc rpt) 
  .fashing (macro @.n1 @.n1 . @.n1 @.n1 . @.n2 @.n0 @.n2 @.n4 )
  .geb (macro @.n2 @.n1 . @.n1 @.n2 . @.n2 @.n0 @.n0 @.n1 )
  .iban (macro S-d  S-e  @.n2 @.n0 @.n3 @.n7 @.n0 @.n1 @.n0 @.n0 @.n5 @.n0 @.n0 @.n0 @.n0 @.n4 @.n4 @.n5 @.n0 @.n5 @.n0 @.n7 )
  .plz (macro @.n6 @.n4 @.n7 @.n1 @.n1 )
  .tsc (macro @.\ @.\ t s c l i e n t @.\ c @.\ )
;;.esp (macro S-. d a t e) ;; SAMPLE trigger espanso
 
  ;; *** Kanata-HOTSTRINGS *** unused but could be used as replacement for ahk or espanso
  .swh (switch
    ((key-history ´ 1))  (fork (macro (unicode é) F17) (macro (unicode É) F17) (lsft rsft)) break ;; F17 just for key consumption
  	((and (key-history d 2) (key-history t 1 ))) (multi  bspc rpt @.fashing) break
  	((and (key-history j 2) (key-history u 1 ))) (macro  j spc n o t spc m a t t e r s ) break
  	((and (key-history x 2) (key-history v 1 ))) (macro  x spc n o t spc m a t t e r s ) break
	((and (key-history p 1 ) lsft)) (macro   spc f i r s t ) break ;; do hold-Shift + tap-p 
	((key-history lsft 2)(key-history , 1)) (macro spc s e c o n d) break ;; this is OR joint... 
  	((key-history , 1)) (macro  k o m m a) break ;; ... never reached 
  	((key-history < 1)) (macro  l e f t <) break ;; this is repeatable, because the trigger is at the end
    () XX break
  )

;; DATES
  .psiso (cmd-output-keys powershell.exe -NoProfile -NoLogo -NonInteractive -Command r#"echo "(" ((Get-Date -Format "yyyy-MM-dd").toCharArray() -join " ") ")""#)
  .cmdspeak (cmd speak.cmd)
  .saynothing (cmd powershell.exe -NoProfile -NoLogo -NonInteractive -Command r#"Add-Type -AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak('nothing')"#)
  .cmdrld (multi (cmd test.cmd) lrld-next)   
  ;;.cmdiso (cmd-output-keys timek.cmd) ;; shell not needed (cmd-output-keys cmd.exe /C timek.cmd)
  .cmdiso (cmd AutoHotkey dtiso.ah2)
  .cmdde  (cmd-output-keys r#"C:\path\kmonad\timedek.cmd"#)  ;; r#"start "" /MIN C:\path\kmonad\timedek.cmd"#
 ;;.cmdde (cmd-output-keys cmd /C r#"echo ( ' t e s t )"# )
 ;; .cmdde (cmd-output-keys cmd /C "echo ^( ' t e s t b )^" )
;;   @SETLOCAL EnableDelayedExpansion
;; @for /f "tokens=1-3 delims=. " %%a in ('date /T') do @set DT=%%a%%b%%c
;; @echo ( %DT:~0,1% %DT:~1,1% . %DT:~2,1% %DT:~3,1% . %DT:~4,1% %DT:~5,1% %DT:~6,1% %DT:~7,1% )) 
;; bash might be on windows much faster than wsl or powershell with profile
;; bashdt (cmd-output-keys bash -c "date +'%F %R' | sed 's/./& /g' | sed 's/:/S-;/g' | sed 's/\(.\{20\}\)\(.*\)/\(\1 spc \2\)/'")

;; unused Last lines of script no leading spaces to enable replacement (incudes would be easier)
.dayiso (macro @.n2 @.n0 @.n2 @.n3 - @.n0 @.n3 - @.n0 @.n6   )
.dayde  (macro @.n0 @.n6 . @.n0 @.n3 . @.n2 @.n0 @.n2 @.n3  ))